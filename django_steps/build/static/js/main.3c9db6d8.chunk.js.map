{"version":3,"sources":["map/MapActions.js","constants/ArcGISConstants.js","constants/DatabaseConstants.js","util/RestUtil.js","map/MapStore.js","map/SummaryMapView.jsx","sidewalk/SidewalkActions.js","sidewalk/SidewalkStore.js","util/FileUtilities.js","images/ImageSelectorComponent.jsx","misc-components/LoaderComponent.jsx","images/ImageUploadModal.jsx","sidewalk/UploadSidewalkImageComponent.jsx","sidewalk/PreviewSidewalkImagesComponent.jsx","images/ImageDisplayList.jsx","images/InfiniteImageGallery.jsx","sidewalk/SidewalkImagesView.jsx","sidewalk/SidewalkDetailsView.jsx","constants/ThemeConstants.js","map/MapDashboard.jsx","misc-components/AboutPageView.jsx","admin/AdminActions.js","admin/AdminStore.js","misc-components/NavbarComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Actions","Reflux","createActions","esriURL","url","MAX_UPLOAD_SIZE","makeRequestURL","endpoint","concat","RestUtil","body","optionOverrides","arguments","length","undefined","options","Object","assign","uri","headers","Content-Type","json","method","rp","post","query","qs","get","MapStore","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sidewalks","sidewalkSelected","listenables","_this2","sendGetRequest","then","res","setState","catch","err","console","error","open","Map","MapView","FeatureLayer","PopupTemplate","_this3","map","basemap","view","container","center","zoom","featureLayer","add","on","data","longitude","mapPoint","latitude","selectedSidewalkDetails","find","sidewalk","id","Store","SummaryMapView","store","load","Promise","all","esriLoader","loadModules","display","react_default","a","createElement","Component","SidewalkStore","loadedUserImages","hasNextImagesPage","currentSidewalk","uploadingSidewalkImage","uploadedImageError","newSidewalk","base64Image","sendPostRequest","image","startIndex","stopIndex","updateStateCallback","_this4","endIndex","hasMoreImages","slice","images","comment","_this5","value","getFile","file","resolve","reject","reader","FileReader","onerror","abort","onload","result","readAsDataURL","ImageSelectorComponent","className","FormControl","readOnly","type","placeholder","props","fileName","Button","onClick","fileInput","click","bsStyle","accept","onChange","onSelect","ref","React","LoaderComponent","CircularProgress_default","ImageUploadModal","_selectImageToUpload","event","target","files","size","loadingSelectedImage","selectedImageSize","selectedImage","selectedFileName","name","_shouldDisplaySizeWarning","Boolean","_canUpload","_cancel","onClose","_confirmUpload","split","Modal","show","visible","onHide","Header","Title","Body","Alert","Math","floor","ImageSelectorComponent_ImageSelectorComponent","alt","src","LoaderComponent_LoaderComponent","Footer","disabled","UploadSidewalkImageComponent","PreviewSidewalkImagesComponent","previewImage","ImageDisplayList","listRef","createRef","current","forceUpdateGrid","loadedCount","hasNextPage","loadedItemCount","InfiniteLoader_default","isRowLoaded","loadMoreRows","rowCount","_ref","onRowsRendered","List_default","height","rowHeight","rowRenderer","width","PureComponent","InfiniteImageGallery","_onResize","forceUpdate","_onImageClicked","index","currentImageIndex","_isRowLoaded","loadedImages","_loadMoreRows","_ref2","loadMoreData","_rowRenderer","_ref3","content","key","style","_handleKeyDown","selfRef","window","addEventListener","prevProps","focus","removeEventListener","innerWidth","tabIndex","onKeyDown","Drawer_default","variant","anchor","renderSelectedImage","Close_default","ImageDisplayList_ImageDisplayList","isNextPageLoading","SidewalkImagesView","_loadMoreImages","SidewalkActions","loadUploadedImages","InfiniteImageGallery_InfiniteImageGallery","SidewalkDetailsView","_openImageModal","modalOpened","_closeImageModal","uploadedFile","uploadSidewalkImage","_viewImages","viewingImages","_closeImages","_handleClose","handleChange","e","handleSubmit","commentString","uploadComment","sidewalkDetails","loadSidewalkDetails","header","component","expanded","classes","ExpansionPanel_default","defaultExpanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","heading","ExpansionPanelDetails_default","imageSection","lastImage","address","averageVelocity","UploadSidewalkImageComponent_UploadSidewalkImageComponent","PreviewSidewalkImagesComponent_PreviewSidewalkImagesComponent","ImageUploadModal_ImageUploadModal","SidewalkImagesView_SidewalkImagesView","toFixed","totalRatings","_formatRating","overallRating","accessibility","connectivity","comfort","physicalSafety","senseOfSecurity","comments","FormGroup","bsSize","controlId","validationState","getCommentLength","Feedback","item","text","date","mobilityTypeDistribution","mobilityType","renderExpansionPanel","renderSummaryDetails","renderUploadImageComponent","renderRatings","renderComments","renderPedestrianData","renderDrawerDetails","withStyles","theme","root","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","fontFamily","MapDashboard","_onClose","MapActions","setDrawerOpened","loadAllSidewalks","SummaryMapView_SummaryMapView","sidewalk_SidewalkDetailsView","AboutPageView","title","renderCategory","AdminStore","isLoggedIn","styles","flexGrow","menuButton","marginLeft","marginRight","button","&:hover","color","&:focus","titleButton","NavbarComponent","AppBar_default","position","Toolbar_default","Button_default","href","App","misc_components_NavbarComponent","Switch","Route","path","location","hostname","match","createMuiTheme","palette","primary","purple","secondary","main","ReactDOM","render","BrowserRouter","core_styles","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c9db6d8.chunk.js","sourcesContent":["import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"loadAllSidewalks\",\r\n\t\"display\",\r\n\t\"setDrawerOpened\"\r\n]);\r\n\r\nexport default Actions;","export const esriURL = { \r\n    url: \"https://js.arcgis.com/4.9\"\r\n};\r\n\r\nexport const layerURL = \"https://services9.arcgis.com/8ccGcFm2KpUhl0DB/arcgis/rest/services/edm_network_walkability/FeatureServer\";\r\n","export const DATABASE_BASE_URL = \"http://199.116.235.159:8000\",\r\n\tMAX_UPLOAD_SIZE = 6291456;\r\n","import rp from \"request-promise\";\r\nimport {DATABASE_BASE_URL} from \"../constants/DatabaseConstants\";\r\n\r\n/**\r\n * Gets the URL to send an HTTP request to\r\n * @param {String} endpoint - the endpoint to send the request to on the server (everything after the /api/ part of the URI)\r\n * @return the URL to send an HTTP request to\r\n */\r\nconst makeRequestURL = (endpoint) => {\r\n\treturn `${DATABASE_BASE_URL}/api/${endpoint}/`;\r\n};\r\n\r\nexport default class RestUtil {\r\n\r\n\t/**\r\n\t * Sends an HTTP POST request to the specified endpoint\r\n\t * @param {String} endpoint - the endpoint in the database to send the request to\r\n\t * @param {Object} body - the payload to send as part of the request\r\n\t * @param {Object?} optionOverrides - an object that defines overrides to the options sent with the request\r\n\t * @return {Promise} - a promise that resolves when the request is complete with the response as it's parameter\r\n\t */\r\n\tstatic sendPostRequest(endpoint, body, optionOverrides = {}) {\r\n\t\tconst options = Object.assign({\r\n\t\t\turi: makeRequestURL(endpoint),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tjson: true,\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: body\r\n\t\t}, optionOverrides);\r\n\t\treturn rp.post(options);\r\n\t}\r\n\r\n\t/**\r\n\t * Sends an HTTP GET request to the specified endpoint\r\n\t * @param {String} endpoint - the endpoint in the database to send the request to\r\n\t * @param {Object?} query - an optional parameter defining any query strings include in the request URL\r\n\t * @param {Object?} optionOverrides - an object that defines overrides to the options sent with the request\r\n\t * @return {Promise} - a promise that resolves when the request is complete with the response as it's parameter\r\n\t */\r\n\tstatic sendGetRequest(endpoint, query = {}, optionOverrides = {}) {\r\n\t\tconst options = Object.assign({\r\n\t\t\turi: makeRequestURL(endpoint),\r\n\t\t\tjson: true,\r\n\t\t\tqs: query\r\n\t\t}, optionOverrides);\r\n\t\treturn rp.get(options);\r\n\t}\r\n}","import Reflux from \"reflux\";\r\n\r\nimport Actions from \"./MapActions\";\r\nimport {layerURL} from \"../constants/ArcGISConstants\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\nexport default class MapStore extends Reflux.Store {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\t\t\tsidewalks: [],\r\n\t\t\tsidewalkSelected: false\r\n\t\t};\r\n\t\tthis.listenables = Actions;\r\n\t}\r\n\r\n\tonLoadAllSidewalks() {\r\n\t\tRestUtil.sendGetRequest(\"sidewalk\").then((res) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsidewalks: res\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\t\r\n\tonSetDrawerOpened(open) {\r\n\t\tthis.setState({\r\n\t\t\tsidewalkSelected: open\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Calls esriLoader which helps the react-app to communicate with the ArcGIS API for javascript\r\n\t * @param {class} Map class that specifies the type of basemap for the map to laod as\r\n\t * @param {class} MapView specifies which div element to bind to, the initial map location and functions to pass in\r\n\t * @param {class} FeatureLayer allows the layering of the maps on the basemap\r\n\t * @param {class} PopupTemplate displays a popup on the map when clicked\r\n\t */\r\n    onDisplay(Map, MapView, FeatureLayer, PopupTemplate) {\r\n\t\tconst map = new Map({\r\n\t\t\tbasemap: \"osm\"\r\n\t\t});\r\n\t\r\n\t\tconst view = new MapView({\r\n\t\t\tmap: map,\r\n\t\t\tcontainer: \"mapContainer\",\r\n\t\t\tbasemap: 'osm',\r\n\t\t\tcenter: [-113.4990, 53.5405],\r\n\t\t\tzoom: 15\r\n\t\t});\r\n\t\t\r\n\t\tconst featureLayer = new FeatureLayer({\r\n\t\t\turl: layerURL\r\n\t\t});\r\n\r\n\t\tmap.add(featureLayer);\r\n\t\tview.on(\"click\",(data) => {\r\n\t\t\t// featureLayer.popupTemplate = {\r\n\t\t\t// \tcontent: \"Unique ID: {osm_id}\"\r\n\t\t\t// }\r\n\t\t\t// TODO: set sidewalk ID from data instead of using mock\r\n\t\t\tthis.setState({\r\n\t\t\t\tlongitude: data.mapPoint.longitude,\r\n\t\t\t\tlatitude: data.mapPoint.latitude,\r\n\t\t\t\tsidewalkSelected: true,\r\n\t\t\t\tselectedSidewalkDetails: this.state.sidewalks.find((sidewalk) => sidewalk.id === 2)\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\tmap,\r\n\t\t\tview\r\n         });\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Component } from 'reflux';\r\nimport esriLoader from \"esri-loader\";\r\n\r\nimport Actions from \"./MapActions\";\r\nimport Store from \"./MapStore\";\r\n\r\nimport {esriURL} from \"../constants/ArcGISConstants\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\nexport default class SummaryMapView extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n  \tcomponentDidMount() {\r\n\t\tthis.load();\r\n\t}\r\n\r\n\tload() {\r\n\t\tPromise.all([esriLoader.loadModules(['esri/Map', 'esri/views/MapView'], esriURL), esriLoader.loadModules([\"esri/layers/FeatureLayer\", \"esri/PopupTemplate\"], esriURL)]).then((data) => {\r\n\t\t\tActions.display(data[0][0],data[0][1],data[1][0],data[1][1]);\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"mapContainer\"/>\r\n\t\t);\r\n\t}\r\n}\r\n","import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"uploadSidewalkImage\",\r\n\t\"loadUploadedImages\",\r\n\t\"loadSidewalkDetails\",\r\n\t\"uploadComment\"\r\n]);\r\n\r\nexport default Actions;","import Reflux from \"reflux\";\r\n\r\nimport Actions from \"./SidewalkActions\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\n/**\r\n * This store keeps track of the state of components that deal with sidewalks\r\n */\r\nexport default class SidewalkStore extends Reflux.Store {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tloadedUserImages: [],\r\n\t\t\thasNextImagesPage: true,\r\n\t\t\tcurrentSidewalk: null,\r\n\t\t\tuploadingSidewalkImage: false,\r\n\t\t\tuploadedImageError: false\r\n\t\t};\r\n\t\tthis.listenables = Actions;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the specified sidewalk\r\n\t * @param {Object} sidewalk - a basic sumamry of the sidewalk to load, including it's id and average ratings\r\n\t */\r\n\tonLoadSidewalkDetails(sidewalk) {\r\n\t\tRestUtil.sendGetRequest(`sidewalk/${sidewalk.id}`).then((data) => {\r\n\t\t\tconst newSidewalk = Object.assign({}, sidewalk, data);\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSidewalk: newSidewalk\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user selecting an image to upload to a sidewalk\r\n\t * @param {String} base64Image - the image as a base64 string\r\n\t */\r\n\tonUploadSidewalkImage(base64Image) {\r\n\t\tthis.setState({\r\n\t\t\tuploadingSidewalkImage: true,\r\n\t\t\tuploadedImageError: false\r\n\t\t});\r\n\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/image/create`, {\r\n\t\t\timage: base64Image\r\n\t\t}).then(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tuploadingSidewalkImage: false,\r\n\t\t\t\tuploadedImageError: false\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tuploadingSidewalkImage: false,\r\n\t\t\t\tuploadedImageError: true\r\n\t\t\t});\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Loads user uploaded images from the database\r\n\t * @param {number} startIndex - the amount of images to skip before starting to return them\r\n\t * @param {number} startIndex - the index of the last item to load\r\n\t * @param {function} updateStateCallback - a callback function that will be invoked when the images are loaded\r\n\t */\r\n\tonLoadUploadedImages(startIndex, stopIndex, updateStateCallback) {\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/image`, {\r\n\t\t\tstartIndex: startIndex,\r\n\t\t\tendIndex: stopIndex\r\n\t\t}).then((res) => {\r\n\t\t\t// TODO: potentially fetch data for each new loaded image and assign to data attribute\r\n\t\t\tthis.setState({\r\n\t\t\t\thasNextImagesPage: res.hasMoreImages,\r\n\t\t\t\tloadedUserImages: this.state.loadedUserImages.slice(0).concat(res.images)\r\n\t\t\t});\r\n\t\t\tupdateStateCallback();\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\tonUploadComment(comment) {\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk}/comment/create`).then((data) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tvalue: \"\"\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n}","export const\r\n\t/**\r\n\t * Converts bytes into megabytes\r\n\t * @param {number} bytes - the amount in bytes to convert\r\n\t * @return {number} - the input bytes value represented in megabytes form\r\n\t */\r\n\tbytesToMB = (bytes) => {\r\n\t\treturn bytes / 1048576;\r\n\t},\r\n\t/**\r\n\t * Gets a base64 encoded string of a file that a user has selected to upload\r\n\t * @param {Object} file - the file that the user has selected\r\n\t * @return {Promise} - a promise that resolves with the base64 string\r\n\t */\r\n\tgetFile = (file) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.onerror = (err) => {\r\n\t\t\t\treader.abort();\r\n\t\t\t\treject(err);\r\n\t\t\t};\r\n\t\t\treader.onload = function() {\r\n\t\t\t\tresolve(this.result);\r\n\t\t\t};\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t});\r\n\t};","import React from \"react\";\r\nimport {Button, FormControl} from \"react-bootstrap\";\r\n\r\n/**\r\n * This component allows the user to select an image to upload, and it displays the name of the current\r\n * selected image.\r\n */\r\nexport default class ImageSelectorComponent extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<FormControl\r\n\t\t\t\t   readOnly\r\n\t\t\t\t   type=\"text\"\r\n\t\t\t\t   placeholder={this.props.fileName || \"No file selected\"}\r\n\t\t\t\t />\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={() => this.fileInput.click()}\r\n\t\t\t\t\tbsStyle=\"primary\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\t\tonChange={this.props.onSelect}\r\n\t\t\t\t\t\t\tclassName=\"uploadImageInput\"\r\n\t\t\t\t\t\t\tref={(fileInput) => {this.fileInput = fileInput;}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<span className=\"imageComponentButtonText\">\r\n\t\t\t\t\t\t\tChoose File\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n/**\r\n * This component represents the loading spinner that is displayed when an asynchronous action is performed\r\n */\r\nexport default class LoaderComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\treturn <CircularProgress />;\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport {Modal, Button, Alert} from \"react-bootstrap\";\r\n\r\nimport {getFile, bytesToMB} from \"../util/FileUtilities\";\r\nimport ImageSelectorComponent from \"./ImageSelectorComponent\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\nimport {MAX_UPLOAD_SIZE} from \"../constants/DatabaseConstants\";\r\n\r\n/**\r\n * This component renders a modal that allows the user to select an image from their local files,\r\n * and then upload that image to the database. The user's selected image will be previewed in this modal.\r\n */\r\nexport default class ImageUploadModal extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user making a selection in the file selection dialog\r\n\t * @param {Object} event - the event representing the file selection interaction\r\n\t */\r\n\t_selectImageToUpload = (event) => {\r\n\t\tconst file = event.target.files[0];\r\n\t\tif (file && file.size <= MAX_UPLOAD_SIZE) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tloadingSelectedImage: true,\r\n\t\t\t\tselectedImageSize: null,\r\n\t\t\t\tselectedImage: null,\r\n\t\t\t\tselectedFileName: file.name\r\n\t\t\t});\r\n\t\t\tgetFile(file).then((res) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tselectedImage: res,\r\n\t\t\t\t\tselectedImageSize: file.size,\r\n\t\t\t\t\tloadingSelectedImage: false\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else if (!this.state.selectedImage || (file && file.size > MAX_UPLOAD_SIZE)) {\r\n\t\t\t// don't overwrite any existing selected image\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedImageSize: file && file.size,\r\n\t\t\t\tselectedImage: null,\r\n\t\t\t\tselectedFileName: file && file.name,\r\n\t\t\t\tloadingSelectedImage: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets whether the large image size warnings should be rendered or not\r\n\t * @return {boolean} - whether the large image size warnings should be rendered or not\r\n\t */\r\n\t_shouldDisplaySizeWarning = () => {\r\n\t\treturn Boolean(this.state.selectedImageSize && this.state.selectedImageSize > MAX_UPLOAD_SIZE);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets whether the upload image should be active or not\r\n\t * @return {boolean} - whether the upload image should be active or not\r\n\t */\r\n\t_canUpload = () => {\r\n\t\treturn Boolean(this.state.selectedImage && this.state.selectedImageSize <= MAX_UPLOAD_SIZE);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user closing the modal without uploading the image\r\n\t */\r\n\t_cancel = () => {\r\n\t\tthis.setState({\r\n\t\t\tselectedImage: null,\r\n\t\t\tselectedImageSize: null,\r\n\t\t\tselectedFileName: null,\r\n\t\t\tloadingSelectedImage: false\r\n\t\t});\r\n\t\tthis.props.onClose();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user selecting the upload button\r\n\t */\r\n\t_confirmUpload = () => {\r\n\t\tthis.props.onClose(this.state.selectedImage.split(\";base64,\")[1]);\r\n\t\tthis.setState({\r\n\t\t\tselectedImage: null,\r\n\t\t\tselectedImageSize: null,\r\n\t\t\tselectedFileName: null,\r\n\t\t\tloadingSelectedImage: false\r\n\t\t});\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t   <Modal\r\n\t\t \t\tshow={this.props.visible}\r\n\t\t \t\tonHide={this._cancel}\r\n\t\t \t>\r\n\t\t \t<Modal.Header>\r\n\t\t \t  <Modal.Title>Upload Image</Modal.Title>\r\n\t\t \t</Modal.Header>\r\n\t\t \t<Modal.Body>\r\n\t\t \t\t{\r\n\t\t \t\t\tthis._shouldDisplaySizeWarning() && (\r\n\t\t \t\t\t\t<Alert bsStyle=\"danger\">\r\n\t\t \t\t\t\t\tThat image is too large. The selected image should be no more than {Math.floor(bytesToMB(MAX_UPLOAD_SIZE))} megabytes.\r\n\t\t \t\t\t\t</Alert>\r\n\t\t \t\t\t)\r\n\t\t \t\t}\r\n\t\t \t\t<ImageSelectorComponent onSelect={this._selectImageToUpload} fileName={this.state.selectedFileName} />\r\n\t\t \t\t{\r\n\t\t \t\t\tthis.state.selectedImage && (\r\n\t\t \t\t\t\t<div className=\"selectedImagePreview\">\r\n\t\t \t\t\t\t\t<img className=\"img-responsive\" alt=\"selected\" src={this.state.selectedImage} />\r\n\t\t \t\t\t\t</div>\r\n\t\t \t\t\t)\r\n\t\t \t\t}\r\n\t\t \t\t{\r\n\t\t \t\t\tthis.state.loadingSelectedImage && <LoaderComponent />\r\n\t\t \t\t}\r\n\t\t \t</Modal.Body>\r\n\r\n\t\t \t<Modal.Footer>\r\n\t\t \t  <Button onClick={this._cancel}>Cancel</Button>\r\n\t\t \t  <Button bsStyle=\"primary\" onClick={this._confirmUpload} disabled={!this._canUpload()}>Upload</Button>\r\n\t\t \t</Modal.Footer>\r\n\t\t   </Modal>\r\n\t\t);\r\n\t}\r\n\r\n}","import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n/**\r\n * This component represents the \"Upload Image\" button that is visible on a Sidewalk's details\r\n */\r\nexport default class UploadSidewalkImageComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Button bsStyle=\"primary\" onClick={this.props.onClick}>\r\n\t\t\t\t<span className=\"glyphicon glyphicon-camera\" />\r\n\t\t\t\t<span className=\"uploadSidewalkImageText\">\r\n\t\t\t\t\tUpload Image\r\n\t\t\t\t</span>\r\n\t\t\t</Button>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\n\r\n/**\r\n * This component represents the view where the user can select to see all images uploaded to a sidewalk\r\n */\r\nexport default class PreviewSidewalkImagesComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"col-md-12\" onClick={this.props.onClick}>\r\n\t\t\t\t<div className=\"pull-left\">\r\n\t\t\t\t\t<img src={this.props.previewImage} alt=\"preview\" />\r\n\t\t\t\t</div>\r\n\t\t\t   <div className=\"pull-left\">View Images</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport InfiniteLoader from \"react-virtualized/dist/commonjs/InfiniteLoader\";\r\nimport List from \"react-virtualized/dist/commonjs/List\";\r\n\r\nexport default class ImageDisplayList extends React.PureComponent {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.listRef = React.createRef();\r\n\t}\r\n\t\r\n\tcomponentWillReceiveProps(){\r\n\t\tthis.listRef.current.forceUpdateGrid();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst loadedCount = this.props.hasNextPage ? this.props.loadedItemCount + 1 : this.props.loadedItemCount;\r\n\t\treturn (\r\n\t\t\t<InfiniteLoader\r\n\t\t\t  isRowLoaded={this.props.isRowLoaded}\r\n\t\t\t  loadMoreRows={this.props.loadMoreRows}\r\n\t\t\t  rowCount={loadedCount}>\r\n\t\t\t  {({onRowsRendered}) => (\r\n\t\t\t\t\t<List\r\n\t\t\t\t\t  ref={this.listRef}\r\n\t\t\t\t\t  height={1000}\r\n\t\t\t\t\t  onRowsRendered={onRowsRendered}\r\n\t\t\t\t\t  rowCount={loadedCount}\r\n\t\t\t\t\t  rowHeight={160}\r\n\t\t\t\t\t  rowRenderer={this.props.rowRenderer}\r\n\t\t\t\t\t  width={250}\r\n\t\t\t\t\t/>\r\n\t\t\t  )}\r\n\t\t\t</InfiniteLoader>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\nimport ImageDisplayList from \"./ImageDisplayList\";\r\nimport MasonryInfiniteScroller from \"react-masonry-infinite\";\r\n\r\n// TODO: potentially use .data instead of .url for loaded images (depends on which is faster but there is also memory tradeoff)\r\n\r\n/**\r\n * This component handles the view where the user can see all of the images posted to a sidewalk\r\n */\r\nexport default class InfiniteImageGallery extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrentImageIndex: 0\r\n\t\t};\r\n\r\n\t\tthis.selfRef = React.createRef();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Handles the window being resized\r\n\t */\r\n\t_onResize = () => {\r\n\t\tif (this.props.visible) {\r\n\t\t\tthis.forceUpdate();\r\n\t\t}\r\n\t};\r\n\t\r\n\tcomponentDidMount() {\r\n\t\twindow.addEventListener(\"resize\", this._onResize);\r\n\t}\r\n\t\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif (prevProps.visible !== this.props.visible && this.props.visible) {\r\n\t\t\tthis.selfRef.current.focus();\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentWillUnmount() {\r\n\t\twindow.removeEventListener(\"resize\", this._onResize);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Handles an image being clicked\r\n\t * @param {number} index - the index of the image that was just clicked\r\n\t */\r\n\t_onImageClicked = (index) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentImageIndex: index\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets whether the specified item is loaded\r\n\t * @param {number} index - the index of the item in the list of all loaded items\r\n\t * @return {boolean} - whether the specified item is loaded\r\n\t */\r\n\t_isRowLoaded = ({index}) => {\r\n\t\treturn Boolean(this.props.loadedImages[index]);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Loads more items\r\n\t * @param {number} startIndex - the starting index of new items to load\r\n\t * @param {number} stopIndex - the ending index of new items to load\r\n\t */\r\n\t_loadMoreRows = ({startIndex, stopIndex}) => {\r\n\t\t// TODO: remove this if statement if using drawer\r\n\t\tif (!startIndex) {\r\n\t\t\tstartIndex = this.props.loadedImages.length;\r\n\t\t\tstopIndex = startIndex + 1;\r\n\t\t}\r\n\t\tthis.props.loadMoreData(startIndex, stopIndex);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Renders the specified item\r\n\t * @param {number} index - the index of the item in the list of loaded items\r\n\t * @param {*} key - the unique key of this item\r\n\t * @param {Object} style - the object's div style to render\r\n\t * @return {JSX} - the item to render\r\n\t */\r\n\t_rowRenderer = ({index, key, style}) => {\r\n\t\tlet content;\r\n\t\tif (this._isRowLoaded({index})) {\r\n\t\t\tcontent = (\r\n\t\t\t\t<div onClick={() => {this._onImageClicked(index)}} className={this.state.currentImageIndex === index ? \"infiniteImageRowSelected\" : \"infiniteImageRowUnselected\"}>\r\n\t\t\t\t\t<img className=\"img-responsive\" alt=\"uploaded\"\r\n\t\t\t\t\t\twidth={140}\r\n\t\t\t\t\t\tsrc={this.props.loadedImages[index].url} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tcontent = <LoaderComponent />;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"infiniteImageListRow\" key={key} style={style}>\r\n\t\t\t\t{content}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles a key being pressed\r\n\t * @param {Object} event - the event representing the key press\r\n\t */\r\n\t_handleKeyDown = (event) => {\r\n\t\tif (event.key === \"ArrowRight\" || event.key === \"ArrowDown\") {\r\n\t\t\t// TODO: do some testing here\r\n\t\t\tif (this.state.currentImageIndex === this.props.loadedImages.length - 1) {\r\n\t\t\t\tthis._loadMoreRows({\r\n\t\t\t\t\tstartIndex: this.state.currentImageIndex + 1,\r\n\t\t\t\t\tendIndex: this.state.currentImageIndex + 1\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentImageIndex: this.state.currentImageIndex + 1\r\n\t\t\t});\r\n\t\t} else if ((event.key === \"ArrowLeft\" || event.key === \"ArrowUp\") && this.state.currentImageIndex > 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentImageIndex: this.state.currentImageIndex - 1\r\n\t\t\t});\r\n\t\t} else if (event.key === \"Escape\") {\r\n\t\t\tthis.props.onClose();\r\n\t\t}\r\n\t};\r\n\t\r\n\trenderSelectedImage() {\r\n\t\t/*if (this.props.loadedImages[this.state.currentImageIndex]) {\r\n\t\t\treturn (\r\n\t\t\t\t<img className=\"backgroundImage\"\r\n\t\t\t\t\talt=\"selected\"\r\n\t\t\t\t\tsrc={this.props.loadedImages[this.state.currentImageIndex].url} />\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <LoaderComponent />;*/\r\n\t\t\r\n\t\tlet content;\r\n\t\tif (this.props.loadedImages[this.state.currentImageIndex]) {\r\n\t\t\tcontent = (\r\n\t\t\t\t<img className=\"backgroundImage\"\r\n\t\t\t\t\talt=\"selected\"\r\n\t\t\t\t\tsrc={this.props.loadedImages[this.state.currentImageIndex].url} />\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tcontent = <LoaderComponent />;\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t// TODO: find a way to do this without inline styling. width = 100vw - 250px gives some weird problem\r\n\t\t\t// where this container is open if the window is maximized\r\n\t\t\t<div style={{width: window.innerWidth - 250}} className=\"selectedImageWrapper\">\r\n\t\t\t\t{content}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t// TODO: decide which design to use\r\n\t\treturn (\r\n\t\t\t<div tabIndex={0} onKeyDown={this._handleKeyDown} ref={this.selfRef} className=\"noOutlineDiv\" >\r\n\t\t\t\t<Drawer open={this.props.visible}\r\n\t\t\t\t\t\tvariant=\"persistent\"\r\n\t\t\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t\t\t\tanchor=\"left\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t{this.renderSelectedImage()}\r\n\t\t\t\t</Drawer>\r\n\t\t\t\t<Drawer open={this.props.visible}\r\n\t\t\t\t\t\tvariant=\"persistent\"\r\n\t\t\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t\t\t\tanchor=\"right\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<CloseIcon className=\"closeImageListButton\" onClick={this.props.onClose} />\r\n\t\t\t\t\t<ImageDisplayList isRowLoaded={this._isRowLoaded}\r\n\t\t\t\t\t\tloadMoreRows={this.props.isNextPageLoading ? () => {} : this._loadMoreRows}\r\n\t\t\t\t\t\trowRenderer={this._rowRenderer}\r\n\t\t\t\t\t\thasNextPage={this.props.hasNextPage}\r\n\t\t\t\t\t\tloadedItemCount={this.props.loadedImages.length}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Drawer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\t// TODO: set rendered image width to 200 for this\r\n\t\t/*return (\r\n\t\t\t<div tabIndex={0} onKeyDown={this._handleKeyDown} ref={this.selfRef} className=\"noOutlineDiv\" >\r\n\t\t\t\t{this.renderSelectedImage()}\r\n\t\t\t\t<MasonryInfiniteScroller\r\n\t\t\t\t\thasMore={this.props.hasNextPage}\r\n\t\t\t\t\tloadMore={this.props.isNextPageLoading ? () => {} : this._loadMoreRows}\r\n\t\t\t\t\tsizes={[{ columns: 3, gutter: 0 },\r\n\t\t\t\t\t{ mq: '768px', columns: 4, gutter: 0 },\r\n\t\t\t\t\t{ mq: '1024px', columns: 5, gutter: 0 }]}\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.props.loadedImages.map((id, index) =>\r\n\t\t\t\t\t\t\tthis._rowRenderer({index: index, key: index, style: {height: 200, width: 200}})\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</MasonryInfiniteScroller>\r\n\t\t\t\t{this.props.isNextPageLoading && <LoaderComponent />}\r\n\t\t\t</div>\r\n\t\t);*/\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport InfiniteImageGallery from \"../images/InfiniteImageGallery\";\r\nimport SidewalkStore from \"./SidewalkStore\";\r\nimport SidewalkActions from \"./SidewalkActions\";\r\n\r\n/**\r\n * This component handles the view where the user can see all of the images posted to a sidewalk\r\n */\r\nexport default class SidewalkImagesView extends Reflux.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.store = SidewalkStore;\r\n\t\tthis.state = {\r\n\t\t\tisNextPageLoading: false\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Loads more images to display\r\n\t * @param {number} startIndex - the starting index of new items to load\r\n\t * @param {number} stopIndex - the ending index of new items to load\r\n\t */\r\n\t_loadMoreImages = (startIndex, stopIndex) => {\r\n\t\tthis.setState({\r\n\t\t\tisNextPageLoading: true\r\n\t\t});\r\n\t\tSidewalkActions.loadUploadedImages(startIndex, stopIndex, () => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisNextPageLoading: false\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn <InfiniteImageGallery loadedImages={this.state.loadedUserImages}\r\n\t\t\t\t\thasNextPage={this.state.hasNextImagesPage}\r\n\t\t\t\t\tloadMoreData={this._loadMoreImages}\r\n\t\t\t\t\tvisible={this.props.visible}\r\n\t\t\t\t\tisNextPageLoading={this.state.isNextPageLoading}\r\n\t\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t\t/>;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Component } from \"reflux\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\n\r\nimport ImageUploadModal from \"../images/ImageUploadModal\";\r\nimport UploadSidewalkImageComponent from \"./UploadSidewalkImageComponent\";\r\nimport PreviewSidewalkImagesComponent from \"./PreviewSidewalkImagesComponent\";\r\nimport SidewalkImagesView from \"./SidewalkImagesView\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Button, FormGroup, ControlLabel, FormControl } from \"react-bootstrap\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { FONT_FAMILY } from \"../constants/ThemeConstants\";\r\n\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\theading: {\r\n\t\tfontSize: theme.typography.pxToRem(30),\r\n\t\tfontWeight: theme.typography.fontWeightRegular,\r\n\t\tfontFamily: FONT_FAMILY\r\n\t},\r\n});\r\n\r\n/**\r\n * This component handles rendering details about a selected sidewalk\r\n */\r\nclass SidewalkDetailsView extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmodalOpened: false,\r\n\t\t\tviewingImages: false,\r\n\t\t\tvalue: '',\r\n\t\t\tsidewalkDetails: null,\r\n\t\t};\r\n\t\tthis.store = Store;\r\n\t\tthis.selfRef = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif (this.props.visible && !prevProps.visible) {\r\n\t\t\tActions.loadSidewalkDetails(this.props.selectedSidewalkDetails);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Opens the modal allowing the user to upload images\r\n\t */\r\n\t_openImageModal = () => {\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: true\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Closes the image upload modal\r\n\t * @param {String?} - the base64 encoded string representing the image the user uploaded if valid, or undefined otherwise\r\n\t */\r\n\t_closeImageModal = (uploadedFile) => {\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: false\r\n\t\t});\r\n\t\tif (uploadedFile) {\r\n\t\t\tActions.uploadSidewalkImage(uploadedFile);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Opens up the uploaded images view\r\n\t */\r\n\t_viewImages = () => {\r\n\t\tthis.setState({\r\n\t\t\tviewingImages: true\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Closes the uploaded images view\r\n\t */\r\n\t_closeImages = () => {\r\n\t\tthis.setState({\r\n\t\t\tviewingImages: false\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * handles closing of the drawer\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tthis.props.onClose();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles a key being pressed\r\n\t * @param {Object} event - the event representing the key press\r\n\t */\r\n\t_handleKeyDown = (event) => {\r\n\t\tif (event.key === \"Escape\") {\r\n\t\t\tthis._handleClose();\r\n\t\t}\r\n\t};\r\n\r\n\trenderExpansionPanel(header, component, expanded = false) {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<ExpansionPanel defaultExpanded={expanded}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t<Typography className={classes.heading}>{header}</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t{component}\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles rendering summary details about this sidewalk\r\n\t */\r\n\trenderSummaryDetails() {\r\n\t\tlet imageSection = null;\r\n\t\tif (this.state.currentSidewalk.lastImage) {\r\n\t\t\timageSection = (\r\n\t\t\t\t<div className=\"drawerImageSection\">\r\n\t\t\t\t\t<img src={this.state.currentSidewalk.lastImage} />\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\timageSection = <h4>There are no uploaded images for this sidewalk.</h4>;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3 className=\"streetNameSection\">\r\n\t\t\t\t\t{this.state.currentSidewalk.address}\r\n\t\t\t\t</h3>\r\n\t\t\t\t<hr />\r\n\t\t\t\t{imageSection}\r\n\t\t\t\t<hr />\r\n\t\t\t\t<h5>\r\n\t\t\t\t\tThe average pedestrian velocity on this sidewalk is {this.state.currentSidewalk.averageVelocity} metres per second.\r\n\t\t\t\t</h5>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * handles interactions and rendering the button for uploading images\r\n\t */\r\n\trenderUploadImageComponent() {\r\n\t\treturn (\r\n\t\t\t<div className=\"imageButtonDisplay\">\r\n\t\t\t\t<UploadSidewalkImageComponent onClick={() => this.fileInput.click()} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\tonChange={this.props.onSelect}\r\n\t\t\t\t\t\tclassName=\"uploadImageInput\"\r\n\t\t\t\t\t\tref={(fileInput) => { this.fileInput = fileInput; }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.uploadedImageError && (\r\n\t\t\t\t\t\t<Alert bsStyle=\"danger\">\r\n\t\t\t\t\t\t\tAn error occurred while uploading the image.\r\n\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.uploadingSidewalkImage && (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<span>Uploading</span>\r\n\t\t\t\t\t\t\t<LoaderComponent />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<PreviewSidewalkImagesComponent previewImage=\"\" onClick={this._viewImages} />\r\n\t\t\t\t<ImageUploadModal visible={this.state.modalOpened} onClose={this._closeImageModal} />\r\n\t\t\t\t<SidewalkImagesView onClose={this._closeImages} visible={this.state.viewingImages} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t_formatRating(value) {\r\n\t\treturn value && value.toFixed(2);\r\n\t}\r\n\r\n\t/**\r\n\t * handles rendering the ratings on the drawer\r\n\t */\r\n\trenderRatings() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h4>{this.state.currentSidewalk.totalRatings} people have rated this sidewalk.</h4>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<h4>Overall: {this._formatRating(this.state.currentSidewalk.overallRating)}</h4>\r\n\t\t\t\t<h4>Accessibility: {this._formatRating(this.state.currentSidewalk.accessibility)}</h4>\r\n\t\t\t\t<h4>Connectivity: {this._formatRating(this.state.currentSidewalk.connectivity)}</h4>\r\n\t\t\t\t<h4>Comfort: {this._formatRating(this.state.currentSidewalk.comfort)}</h4>\r\n\t\t\t\t<h4>Physical Safety: {this._formatRating(this.state.currentSidewalk.physicalSafety)}</h4>\r\n\t\t\t\t<h4>Sense of Security: {this._formatRating(this.state.currentSidewalk.senseOfSecurity)}</h4>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tgetCommentLength() {\r\n\t\tconst length = this.state.value.length;\r\n\t\tif (length <= 300) return 'success';\r\n\t\telse if (length > 300) return 'error';\r\n\t\treturn null;\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({ \r\n\t\t\tvalue: e.target.value \r\n\t\t});\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\tconst commentString = this.state.value;\r\n\t\tActions.uploadComment(commentString);\r\n\t}\r\n\r\n\trenderComments() {\r\n\t\tconst comments = this.state.currentSidewalk.comments;\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"commentUploadSection\">\r\n\t\t\t\t\t<div className=\"commentBox\">\r\n\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t<FormGroup\r\n\t\t\t\t\t\t\t\tbsSize=\"small\"\r\n\t\t\t\t\t\t\t\tcontrolId=\"formBasicText\"\r\n\t\t\t\t\t\t\t\tvalidationState={this.getCommentLength()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.value}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter text\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<FormControl.Feedback />\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Button bsStyle=\"info\" onClick={this.handleSubmit}>\r\n\t\t\t\t\t\tConfirm\r\n\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<div className=\"commentDisplaySection\">\r\n\t\t\t\t\t<h3> User comments </h3>\r\n\t\t\t\t\t<div >\r\n\t\t\t\t\t\t{comments.map((item, index) =>\r\n\t\t\t\t\t\t\t<div className=\"commentDisplayBox\" key={index}>\r\n\t\t\t\t\t\t\t\t<h5>{item.text}</h5>\r\n\t\t\t\t\t\t\t\t<h6>{item.date}</h6>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div >\r\n\r\n\t\t);\r\n\t}\r\n\r\n\r\n\trenderPedestrianData() {\r\n\t\tif (this.state.currentSidewalk.mobilityTypeDistribution.length === 0) {\r\n\t\t\treturn <h4>No pedestrian data has been recorded for this sidewalk</h4>;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.currentSidewalk.mobilityTypeDistribution.map((mobilityType) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<p>{mobilityType.type}</p>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * handles rendering the components on the drawer\r\n\t */\r\n\trenderDrawerDetails() {\r\n\t\tif (!this.state.currentSidewalk) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.renderExpansionPanel(\"Summary\", this.renderSummaryDetails(), true)}\r\n\t\t\t\t{this.renderExpansionPanel(\"Images\", this.renderUploadImageComponent())}\r\n\t\t\t\t{this.renderExpansionPanel(\"Ratings\", this.renderRatings())}\r\n\t\t\t\t{this.renderExpansionPanel(\"Comments\", this.renderComments())}\r\n\r\n\t\t\t\t{this.renderExpansionPanel(\"Pedestrian Data\", this.renderPedestrianData())}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div tabIndex={0} onKeyDown={this._handleKeyDown} ref={this.selfRef} className=\"noOutlineDiv\">\r\n\t\t\t\t<Drawer open={this.props.visible} anchor=\"right\" variant=\"temporary\">\r\n\t\t\t\t\t<CloseIcon onClick={this._handleClose} className=\"closeImageListButton\" />\r\n\t\t\t\t\t{this.renderDrawerDetails()}\r\n\t\t\t\t</Drawer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default withStyles(styles)(SidewalkDetailsView);","export const SECONDARY_COLOUR = \"#FFEB3B\",\r\n\tFONT_FAMILY = \"Proza Libre\";","import React from \"react\";\r\nimport { Component } from 'reflux';\r\nimport SummaryMapView from \"./SummaryMapView\";\r\nimport SidewalkDetailsView from \"../sidewalk/SidewalkDetailsView\";\r\n\r\nimport MapStore from \"./MapStore\";\r\nimport MapActions from \"./MapActions\";\r\n\r\nexport default class MapDashboard extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t\tthis.store = MapStore;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!this.state.sidewalks || this.state.sidewalks.length === 0) {\r\n\t\t\tMapActions.loadAllSidewalks();\r\n\t\t}\r\n\t}\r\n\t\r\n\t_onClose = () => {\r\n\t\tMapActions.setDrawerOpened(false);\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<SummaryMapView />\r\n\t\t\t\t<SidewalkDetailsView visible={this.state.sidewalkSelected} onClose={this._onClose} selectedSidewalkDetails={this.state.selectedSidewalkDetails} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}","import React from \"react\";\r\n\r\n/**\r\n * This component renders the page that details what the site is about\r\n */\r\nexport default class AboutPageView extends React.Component {\r\n\r\n\t/**\r\n\t * Renders a topic in the about page\r\n\t * @param {String} title - the title of the topic\r\n\t * @param {String} content - the content describing the topic\r\n\t */\r\n\trenderCategory(title, content) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{title}</h3>\r\n\t\t\t\t<p>{content}</p>\r\n\t\t\t\t<hr />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"padding25\">\r\n\t\t\t\t{this.renderCategory(\"What is this website about?\", \r\n\t\t\t\t\t`This website was made for the purpose of allowing the citizens of Edmonton to discuss \r\n\t\t\t\t\ttheir experiences on sidewalks across the city with other people. As a user of this site, you are able to select any\r\n\t\t\t\t\tsidewalk in the city from the map displayed on the home page. By selecting a sidewalk, you will be\r\n\t\t\t\t\tshown what other people think about that particular sidewalk, through ratings, images, and comments.\r\n\t\t\t\t\tYou can leave your own ratings and comments on the sidewalk, as well as upload any image that you\r\n\t\t\t\t\tfeel is relevant to the sidewalk.`)}\r\n\t\t\t\t{this.renderCategory(\"Who will use the results?\", `\r\n\t\t\t\tThe results will primarily be used by two parties. The first one is government officials, so they can see\r\n\t\t\t\twhat sidewalks in the city are in need of improvement the most. STEPS researchers will also use the data collected\r\n\t\t\t\tfrom this website so that they can analyze it to get a bigger picture of the overall state of sidewalks\r\n\t\t\t\tin Edmonton.\r\n\t\t\t\t`)}\r\n\t\t\t\t{this.renderCategory(\"How can I get involved?\", `\r\n\t\t\t\tAll you need to do to be involved with the STEPS application is to leave your feelings and thoughts\r\n\t\t\t\tabout particular sidewalks. You can rate any sidewalk you want, comment on it, or even upload an image to it.\r\n\t\t\t\t`)}\r\n\t\t\t\t{this.renderCategory(\"Privacy Policy\", `\r\n\t\t\t\tAll of the data collected on this site will be used purely for research purposes. We will never sell any of the\r\n\t\t\t\tdata we collect to third parties, and nothing that you upload to the site will be directly linked back to you.\r\n\t\t\t\tAll of your interactions with the site will be anonymous.\r\n\t\t\t\t`)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"placeholderAction\"\r\n]);\r\n\r\nexport default Actions;","import Reflux from \"reflux\";\r\n\r\nimport Actions from \"./AdminActions\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\n/**\r\n * This store keeps track of the state of components that deal with administrator actions\r\n */\r\nexport default class AdminStore extends Reflux.Store {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\t\t\tisLoggedIn: false\r\n\t\t};\r\n        this.listenables = Actions;\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {SECONDARY_COLOUR, FONT_FAMILY} from \"../constants/ThemeConstants\";\r\n\r\nimport AdminStore from \"../admin/AdminStore\";\r\n\r\nconst styles = {\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t},\r\n\tmenuButton: {\r\n\t\tmarginLeft: -12,\r\n\t\tmarginRight: 20,\r\n\t},\r\n\tbutton: {\r\n\t\tfontSize: 14,\r\n\t\t\"&:hover\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\t\"&:focus\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t}\r\n\t},\r\n\ttitleButton: {\r\n\t\tfontSize: 18,\r\n\t\t\"&:hover\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\t\"&:focus\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\tfontFamily: FONT_FAMILY\r\n\t}\r\n};\r\n\r\n/**\r\n * This component renders the global navigation bar at the top of the page\r\n */\r\nclass NavbarComponent extends Reflux.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.store = AdminStore;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<Button color=\"inherit\" className={classes.titleButton} href=\"/\">STEPS</Button>\r\n\t\t\t\t\t\t<Button color=\"inherit\" className={classes.button} href=\"/about\">About</Button>\r\n\t\t\t\t\t\t<Button color=\"inherit\" className={classes.button} href=\"/statistics\">Statistics</Button>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t!this.state.isLoggedIn && <Button color=\"inherit\" className={classes.button} href=\"/login\">Login</Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.isLoggedIn && <Button color=\"inherit\" className={classes.button} href=\"/dashboard\">Dashboard</Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(NavbarComponent);","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport './style/App.scss';\r\n\r\nimport MapDashboard from \"./map/MapDashboard\";\r\nimport AboutPageView from \"./misc-components/AboutPageView\";\r\nimport NavbarComponent from \"./misc-components/NavbarComponent\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavbarComponent />\r\n\t\t<Switch>\r\n\t\t\t<Route path=\"/about/\" component={AboutPageView} />\r\n\t\t\t<Route path=\"/statistics\" component={MapDashboard} />\r\n\t\t\t<Route path=\"/login\" component={MapDashboard} />\r\n\t\t\t<Route path=\"/map/:id\" component={MapDashboard} />\r\n            <Route path=\"/dashboard\" component={MapDashboard} />\r\n\t\t\t<Route path=\"/\" component={MapDashboard} />\r\n\t\t</Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport purple from \"@material-ui/core/colors/purple\";\r\nimport {SECONDARY_COLOUR} from \"./constants/ThemeConstants\";\r\n\r\nconst theme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: purple,\r\n\t\tsecondary: {\r\n\t\t\tmain: SECONDARY_COLOUR,\r\n\t\t}\r\n\t}\r\n});\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<MuiThemeProvider theme={theme}>\r\n\t\t\t<App />\r\n\t\t</MuiThemeProvider>\r\n\t</BrowserRouter>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}