{"version":3,"sources":["map/MapActions.js","constants/ArcGISConstants.js","constants/DatabaseConstants.js","util/RestUtil.js","map/MapStore.js","map/SummaryMapView.jsx","sidewalk/SidewalkActions.js","sidewalk/SidewalkStore.js","util/DateUtilities.js","admin/AdminActions.js","admin/AdminStore.js","sidewalk/SidewalkCommentComponent.jsx","misc-components/LoaderComponent.jsx","misc-components/ConfirmationModal.jsx","sidewalk/CommentDeletionModal.jsx","constants/CommentConstants.js","sidewalk/CommentsListComponent.jsx","util/FileUtilities.js","images/ImageSelectorComponent.jsx","images/ImageUploadModal.jsx","sidewalk/images/UploadSidewalkImageComponent.jsx","sidewalk/images/PreviewSidewalkImagesComponent.jsx","sidewalk/images/SidewalkImageDetailsComponent.jsx","sidewalk/PedestrianDataComponent.jsx","constants/ThemeConstants.js","util/RatingUtil.js","sidewalk/SidewalkRatingsModal.jsx","sidewalk/SidewalkDetailsView.jsx","misc-components/InfiniteLoadingList.jsx","images/InfiniteImageGallery.jsx","sidewalk/images/ImageDeletionModal.jsx","sidewalk/images/SidewalkUploadedImagesGallery.jsx","misc-components/BaseAlertComponent.jsx","misc-components/ErrorAlertComponent.jsx","sidewalk/images/UploadedImageErrorComponent.jsx","misc-components/SuccessAlertComponent.jsx","sidewalk/images/UploadedImageSuccessComponent.jsx","sidewalk/CommentDeleteSuccessComponent.jsx","sidewalk/CommentDeleteErrorComponent.jsx","sidewalk/images/ImageDeleteErrorComponent.jsx","sidewalk/images/ImageDeleteSuccessComponent.jsx","sidewalk/CommentPostSuccessComponent.jsx","sidewalk/CommentPostErrorComponent.jsx","sidewalk/PostRatingSuccessComponent.jsx","sidewalk/PostRatingErrorComponent.jsx","map/AlertsContainer.jsx","map/MapDashboard.jsx","misc-components/AboutPageView.jsx","admin/AdminPanelView.jsx","misc-components/NavbarComponent.jsx","admin/AdminLogin.jsx","summary/SummaryStatisticsActions.js","summary/SummaryStatisticsStore.js","summary/SummaryStatisticsView.jsx","App.js","serviceWorker.js","index.js"],"names":["Actions","Reflux","createActions","esriURL","url","downtownLongitude","downtownLatitude","MAX_UPLOAD_SIZE","makeRequestURL","endpoint","concat","RestUtil","body","optionOverrides","arguments","length","undefined","options","Object","assign","uri","headers","Content-Type","json","method","rp","post","query","qs","get","MapStore","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sidewalks","sidewalkSelected","longitude","latitude","searchVisible","listenables","sidewalk","view","goTo","center","animate","duration","easing","setState","selectedSidewalkDetails","console","error","_this2","sendGetRequest","then","res","catch","err","open","_this3","esriLoader","loadModules","data","Map","MapView","Search","BasemapToggle","map","basemap","container","zoom","toggle","nextBasemap","ui","add","search","FeatureLayer","Circle","Legend","Expand","featureLayer","renderer","type","field","defaultSymbol","uniqueValueInfos","value","symbol","width","color","style","highlightOptions","fillOpacity","when","legend","layerInfos","layer","title","expandLegend","content","updateView","isMobile","toAdd","toRemove","remove","setLegendMobile","widthBreakpoint","watch","breakpoint","on","event","pxToMeters","extent","popupEnabled","popup","dockEnabled","visible","dockOptions","buttonEnabled","popupTemplate","c","mapPoint","radius","q","createQuery","geometry","queryFeatures","results","features","resultingFeatures","sidewalkID","parseInt","attributes","osm_id","Rating","find","s","id","viewSidewalkDetails","_this4","updatedSidewalks","slice","selectedSidewalk","accessibility","overallRating","comfort","connectivity","physicalSafety","senseOfSecurity","_this5","result","feature","Store","SummaryMapView","store","loadMapDetails","react_default","a","createElement","Component","SidewalkStore","_getDefaultSidewalkState","loadedUserImages","hasNextImagesPage","currentSidewalk","uploadingSidewalkImage","uploadedImageError","uploadingComment","uploadCommentFailed","uploadImageSucceeded","hasNextCommentsPage","newSidewalk","comments","lastImage","base64Image","sendPostRequest","image","startIndex","stopIndex","updateStateCallback","endIndex","hasMoreImages","images","comment","uploadCommentSucceeded","text","currentSidewalkComments","unshift","onSuccess","_this6","isUploadingRatings","successfullyUploadedRatings","failedUploadingRatings","parseFloat","index","indexOf","newTotalComments","totalComments","splice","onLastImageDeleted","onNoImagesRemaining","newImagesCount","totalImages","newImages","sidewalkOverride","_this7","hasMoreComments","successCallback","_this8","months","DateUtilities","date","getMonth","getDate","getFullYear","getHours","getMinutes","getTimeDisplay","monthNumber","AdminStore","isLoggedIn","isDeletingComment","successfullyDeletedComment","failedDeleteComment","username","password","credentialError","pendingImages","sidewalkId","commentId","onFinish","user","pass","successfullyLoggedIn","failedToLogIn","imageId","isDeletingImage","successfullyDeletedImage","failedDeleteImage","accepted","respondingToImage","successfullyRespondedToImage","failedToRespondToImage","filter","SidewalkCommentComponent","_handleDelete","props","onDelete","details","Card_default","className","Close_default","onClick","formatDateForDisplay","Date","LoaderComponent","CircularProgress_default","React","ConfirmationModal","_cancel","onCancel","_confirm","onConfirm","classes","Modal_default","onClose","paper","Modal","Header","Title","Footer","Button","bsStyle","disabled","disabledConfirm","withStyles","theme","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","unit","margin","position","top","transform","CommentDeletionModal","deleteComment","success","LoaderComponent_LoaderComponent","misc_components_ConfirmationModal","renderModalBody","COMMENTS_PER_PAGE","COMMENT_ERROR_STATE","COMMENT_PROFANITY_MESSAGE","EMPTY_COMMENT_MESSAGE","PHONE_REGEX","SECONDARY_PHONE_REGEX","Filter","replaceRegex","placeHolder","addWords","CommentsListComponent","_validateCommentState","isProfane","message","match","_validateSubstringSwears","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","swearsList","words","Symbol","iterator","next","done","swear","includes","toLowerCase","return","_onCommentBlur","validation","enteredComment","commentValidation","_handleChange","e","target","_handleSubmit","validateComment","SidewalkActions","uploadComment","_openConfirmationModal","selectedComment","modalOpened","_closeConfirmationModal","deleted","removeLoadedComment","_isRowLoaded","_ref","Boolean","_loadMoreRows","isLoadingComments","loadComments","_getCommentsOnPage","_visitPreviousPage","currentPage","_visitNextPage","SidewalkCommentComponent_SidewalkCommentComponent","key","Alert","FormGroup","bsSize","controlId","validationState","FormControl","componentClass","placeholder","onChange","onBlur","rows","Feedback","renderCurrentCommentsPage","CommentDeletionModal_CommentDeletionModal","getFile","file","Promise","resolve","reject","reader","FileReader","onerror","abort","onload","readAsDataURL","ImageSelectorComponent","readOnly","fileName","fileInput","click","accept","onSelect","ref","ImageUploadModal","_selectImageToUpload","files","size","loadingSelectedImage","selectedImageSize","selectedImage","selectedFileName","name","_shouldDisplaySizeWarning","_canUpload","_confirmUpload","Math","floor","ImageSelectorComponent_ImageSelectorComponent","alt","src","UploadSidewalkImageComponent","PreviewSidewalkImagesComponent","imageCount","SidewalkImageDetailsComponent","_viewImages","onOpenImages","_openImageModal","_closeImageModal","uploadedFile","uploadSidewalkImage","PreviewSidewalkImagesComponent_PreviewSidewalkImagesComponent","previewImage","UploadSidewalkImageComponent_UploadSidewalkImageComponent","images_ImageUploadModal","PedestrianDataComponent","Paper_default","root","Table_default","TableHead_default","TableRow_default","TableCell_default","tableCell","numeric","TableBody_default","activities","row","component","scope","distributionPercent","overflowX","fontSize","fontWeight","typography","fontWeightRegular","fontFamily","getRatingDescription","rating","SidewalkRatingsModal","changeAccessibility","accessibilityValue","ChangeConnectivity","connectivityValue","changeComfort","comfortValue","changeSafety","safetyValue","changeSecurity","securityValue","_handleSubmitRating","uploadRatings","Slider_default","slider","min","max","step","paddingLeft","renderSlider","Dialog_default","DialogContent_default","renderBody","DialogActions_default","heading","pxToRem","SidewalkDetailsView","_handleClose","_handleKeyDown","_openRatingsModal","ratingsModalOpen","_closeRatingsModal","postedRating","getSidewalkRatings","updateRatings","renderRatingsAmount","totalRatings","selfRef","createRef","prevProps","loadSidewalkDetails","header","expanded","ExpansionPanel_default","defaultExpanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","data-sidewalk-header","Typography_default","ExpansionPanelDetails_default","imageSection","address","averageVelocity","SidewalkImageDetailsComponent_SidewalkImageDetailsComponent","sidewalk_SidewalkRatingsModal","_formatRating","CommentsListComponent_CommentsListComponent","mobilityTypeDistribution","sidewalk_PedestrianDataComponent","renderExpansionPanel","renderSummaryDetails","renderUploadImageComponent","renderRatings","renderComments","renderPedestrianData","tabIndex","onKeyDown","Drawer_default","anchor","variant","ModalProps","onBackdropClick","renderDrawerDetails","InfiniteLoadingList","listRef","current","forceUpdateGrid","loadedCount","hasNextPage","isNextPageLoading","loadedItemCount","InfiniteLoader_default","isRowLoaded","loadMoreRows","rowCount","onRowsRendered","List_default","height","rowHeight","rowRenderer","outline","PureComponent","InfiniteImageGallery","_onImageClicked","currentImageIndex","getImageIndex","loadedImages","_ref2","loadMoreData","_rowRenderer","_ref3","renderAboveImage","SlideProps","unmountOnExit","renderSelectedImage","InfiniteLoadingList_InfiniteLoadingList","displayImageDrawer","ImageDeletionModal","deleteImage","SidewalkUploadedImagesGallery","_loadMoreImages","loadUploadedImages","setTimeout","_onDeleteImageClicked","_onModalClosed","removeLoadedImage","galleryRef","_renderDeleteButton","selected","stores","InfiniteImageGallery_InfiniteImageGallery","ImageDeletionModal_ImageDeletionModal","BaseAlertComponent","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent_default","alertContentClassName","aria-describedby","icon","action","IconButton_default","aria-label","ErrorAlertComponent","BaseAlertComponent_BaseAlertComponent","Error_default","UploadedImageErrorComponent","dismissImageErrorMessage","ErrorAlertComponent_ErrorAlertComponent","SuccessAlertComponent","CheckCircle_default","UploadedImageSuccessComponent","dismissImageSuccessMessage","SuccessAlertComponent_SuccessAlertComponent","CommentDeleteSuccessComponent","dismissCommentSuccessMessage","CommentDeleteErrorComponent","dismissCommentErrorMessage","ImageDeleteErrorComponent","ImageDeleteSuccessComponent","CommentPostSuccessComponent","CommentPostErrorComponent","PostRatingSuccessComonent","dismissRatingsSuccessMessage","PostRatingErrorComponent","dismissRatingsFailureMessage","AlertsContainer","UploadedImageErrorComponent_UploadedImageErrorComponent","UploadedImageSuccessComponent_UploadedImageSuccessComponent","CommentDeleteSuccessComponent_CommentDeleteSuccessComponent","CommentDeleteErrorComponent_CommentDeleteErrorComponent","ImageDeleteErrorComponent_ImageDeleteErrorComponent","ImageDeleteSuccessComponent_ImageDeleteSuccessComponent","CommentPostErrorComponent_CommentPostErrorComponent","CommentPostSuccessComponent_CommentPostSuccessComponent","PostRatingSuccessComponent_PostRatingSuccessComonent","PostRatingErrorComponent_PostRatingErrorComponent","MapDashboard","MapActions","setDrawerOpened","viewingImages","_closeImages","_updateRatings","updateSidewalkRatings","_onCloseDrawer","loadAllSidewalks","SummaryMapView_SummaryMapView","sidewalk_SidewalkDetailsView","SidewalkUploadedImagesGallery_SidewalkUploadedImagesGallery","AlertsContainer_AlertsContainer","AboutPageView","renderCategory","AdminDrawerImageGallery","_dismissNotifications","AdminActions","dismissImageApprovalNotification","dismissImageRejectionNotification","loadMoreImages","getUnapprovedImages","_onAcceptImage","handlePendingImages","_onRejectImage","_renderResponseButtons","history","push","lib_default","hasMore","loadMore","sizes","columns","gutter","mq","styles","flexGrow","menuButton","marginLeft","marginRight","button","&:hover","&:focus","titleButton","NavbarComponent","AppBar_default","Toolbar_default","Link","to","Button_default","AdminLogin","_handleUserChange","enteredName","_handlePassChange","enteredPassword","_validateCredentials","checkCredentials","md5","dismissLoginSuccess","dismissLoginError","data-admin-login","CardContent_default","ControlLabel","autoFocus","SummaryStatisticsStore","isLoading","contributionsByMonth","sort","b","aSplit","monthYear","split","aMonth","aYear","bSplit","bMonth","bYear","SummaryStatisticsView","_onChangeTab","selectedTab","loadSummaryStatistics","Grid_default","item","xs","data-contributions-value","contribution","month","year","amount","contributions","react_bootstrap_table_lib","pagination","keyField","dataField","dataSort","dataFormat","getMonthName","labels","datasets","label","es","display","scales","yAxes","gridLines","data-summary-contributions","renderCard","totalImagesUploaded","renderContributionsByDate","renderContributionsChart","data-summary-stats","renderSelectedTab","App","misc_components_NavbarComponent","Switch","Route","path","AdminPanelView","window","location","hostname","createMuiTheme","primary","purple","secondary","main","useNextVariants","ReactDOM","render","BrowserRouter","core_styles","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39172fce.chunk.js","sourcesContent":["import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"loadAllSidewalks\",\r\n\t\"loadMapDetails\",\r\n\t\"setDrawerOpened\",\r\n\t\"updateSidewalkRatings\",\r\n\t\"selectSidewalk\"\r\n]);\r\n\r\nexport default Actions;","export const esriURL = { \r\n    url: \"https://js.arcgis.com/4.9\"\r\n};\r\n\r\nexport const layerURL = \"https://services9.arcgis.com/8ccGcFm2KpUhl0DB/arcgis/rest/services/edm_network_walkability/FeatureServer\";\r\n\r\nexport const downtownLongitude = -113.4990;\r\n\r\nexport const downtownLatitude = 53.5405;","export const DATABASE_BASE_URL = \"https://199.116.235.159:8443\",\r\n\tMAX_UPLOAD_SIZE = 3145728;\r\n","import rp from \"request-promise\";\r\nimport {DATABASE_BASE_URL} from \"../constants/DatabaseConstants\";\r\n\r\n/**\r\n * Gets the URL to send an HTTP request to\r\n * @param {String} endpoint - the endpoint to send the request to on the server (everything after the /api/ part of the URI)\r\n * @return the URL to send an HTTP request to\r\n */\r\nconst makeRequestURL = (endpoint) => {\r\n\treturn `${DATABASE_BASE_URL}/api/${endpoint}/`;\r\n};\r\n\r\nexport default class RestUtil {\r\n\r\n\t/**\r\n\t * Sends an HTTP POST request to the specified endpoint\r\n\t * @param {String} endpoint - the endpoint in the database to send the request to\r\n\t * @param {Object} body - the payload to send as part of the request\r\n\t * @param {Object?} optionOverrides - an object that defines overrides to the options sent with the request\r\n\t * @return {Promise} - a promise that resolves when the request is complete with the response as it's parameter\r\n\t */\r\n\tstatic sendPostRequest(endpoint, body, optionOverrides = {}) {\r\n\t\tconst options = Object.assign({\r\n\t\t\turi: makeRequestURL(endpoint),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tjson: true,\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: body\r\n\t\t}, optionOverrides);\r\n\t\treturn rp.post(options);\r\n\t}\r\n\r\n\t/**\r\n\t * Sends an HTTP GET request to the specified endpoint\r\n\t * @param {String} endpoint - the endpoint in the database to send the request to\r\n\t * @param {Object?} query - an optional parameter defining any query strings include in the request URL\r\n\t * @param {Object?} optionOverrides - an object that defines overrides to the options sent with the request\r\n\t * @return {Promise} - a promise that resolves when the request is complete with the response as it's parameter\r\n\t */\r\n\tstatic sendGetRequest(endpoint, query = {}, optionOverrides = {}) {\r\n\t\tconst options = Object.assign({\r\n\t\t\turi: makeRequestURL(endpoint),\r\n\t\t\tjson: true,\r\n\t\t\tqs: query\r\n\t\t}, optionOverrides);\r\n\t\treturn rp.get(options);\r\n\t}\r\n}","import Reflux from \"reflux\";\r\nimport esriLoader from \"esri-loader\";\r\n\r\nimport Actions from \"./MapActions\";\r\nimport {esriURL, layerURL, downtownLongitude, downtownLatitude} from \"../constants/ArcGISConstants\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\nexport default class MapStore extends Reflux.Store {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\t\t\tsidewalks: [],\r\n\t\t\tsidewalkSelected: false,\r\n\t\t\tlongitude: downtownLongitude,\r\n\t\t\tlatitude: downtownLatitude,\r\n\t\t\tsearchVisible: false\r\n\t\t};\r\n\t\tthis.listenables = Actions;\r\n\r\n\t\tif (process.env.NODE_ENV === \"development\"){\r\n\t\t\twindow.DEV_MAP_STORE = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Displays the selected sidewalk\r\n\t * @param {Object} sidewalk - details about the sidewalk\r\n\t * @param {number} latitude - the latitude of the sidewalk's center position\r\n\t * @param {number} longitude - the longitude of the sidewalk's center position\r\n\t */\r\n\tviewSidewalkDetails(sidewalk, latitude, longitude) {\r\n\t\tif (!this.state.view) {\r\n\t\t\tconsole.error(\"The view was not loaded\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.state.view.goTo({\r\n\t\t\tcenter: [longitude, latitude],\r\n\t\t\tanimate: true,\r\n\t\t\tduration: 200,\r\n\t\t\teasing: \"easy-in\"\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tlongitude: longitude,\r\n\t\t\tlatitude: latitude,\r\n\t\t\tsidewalkSelected: true,\r\n\t\t\tselectedSidewalkDetails: sidewalk\r\n\t\t});\r\n\t}\r\n\t\r\n\tonLoadAllSidewalks() {\r\n\t\tRestUtil.sendGetRequest(\"sidewalk\").then((res) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsidewalks: res\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\t\r\n\tonSetDrawerOpened(open) {\r\n\t\tthis.setState({\r\n\t\t\tsidewalkSelected: open\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Calls esriLoader which helps the react-app to communicate with the ArcGIS API for javascript\r\n\t */\r\n\r\n    onLoadMapDetails() {\r\n\t\tesriLoader.loadModules(['esri/Map', 'esri/views/MapView','esri/widgets/Search', \"esri/widgets/BasemapToggle\"], esriURL).then((data) => {\r\n\t\t\tconst Map = data[0],\r\n\t\t\t\tMapView = data[1];\r\n\t\t\t\r\n\t\t\tconst Search = data[2];\r\n\t\t\tconst BasemapToggle = data[3];\r\n\r\n\t\t\tconst map = new Map({\r\n\t\t\t\tbasemap: \"dark-gray-vector\"\r\n\t\t\t\t// basemap: \"satellite\"\r\n\t\t\t\t//layers: [featureLayer],\r\n\t\t\t});\r\n\r\n\t\t\tconst view = new MapView({\r\n\t\t\t\tmap: map,\r\n\t\t\t\tcontainer: \"mapContainer\",\r\n\t\t\t\tcenter: [this.state.longitude, this.state.latitude],\r\n\t\t\t\tzoom: 15\r\n\t\t\t});\r\n\r\n\t\t\tconst toggle = new BasemapToggle({\r\n\t\t\t\tview: view, // view that provides access to the map's 'topo' basemap\r\n\t\t\t\tnextBasemap: \"osm\" // allows for toggling to the 'hybrid' basemap\r\n\t\t\t  });\r\n\t  \r\n\t\t\tview.ui.add(toggle, \"\");\r\n\r\n\t\t\tconst search = new Search({\r\n\t\t\t\tview: view\r\n\t\t\t});\r\n\r\n\t\t\tview.ui.add(search, \"top-right\");\r\n\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tmap,\r\n\t\t\t\tview,\r\n\t\t\t });\r\n\t\t\treturn esriLoader.loadModules([\"esri/layers/FeatureLayer\", \"esri/PopupTemplate\", \"esri/geometry/Circle\", \"esri/Graphic\",\"esri/core/watchUtils\",\"esri/renderers/UniqueValueRenderer\",\"esri/symbols/SimpleFillSymbol\",\"esri/symbols/SimpleLineSymbol\",\"esri/layers/support/MapImage\", \"esri/widgets/Legend\", \"esri/widgets/Expand\"], esriURL);\r\n\t\t}).then((data) => {\r\n\t\t\t\r\n\t\t\tconst FeatureLayer = data[0],\r\n\t\t\t\tPopupTemplate = data[1],\r\n\t\t\t\tCircle = data[2],\r\n\t\t\t\tGraphic = data[3],\r\n\t\t\t\twatchUtils = data[4],\r\n\t\t\t\tUniqueValueRenderer = data[5],\r\n\t\t\t\tSimpleFillSymbol = data[6],\r\n\t\t\t\tSimpleLineSymbol = data[7],\r\n\t\t\t\tMapImage = data[8],\r\n\t\t\t\tLegend = data[9],\r\n\t\t\t\tExpand = data[10],\r\n\t\t\t\tview = this.state.view;\t\r\n\t\t\t\r\n\t\t\tvar Rating = 4;\r\n\r\n\t\t\t// TODO: Confirm if it is impossible to pass a variable in the field parameter instead\r\n\t\t\tconst sidewalkColorMapRenderer = {\r\n\t\t\t\ttype: \"unique-value\",  // autocasts as new UniqueValueRenderer()\r\n\t\t\t\tfield: \"Rating\",\r\n\t\t\t\tdefaultSymbol: { type: \"simple-fill\" },  // autocasts as new SimpleFillSymbol()\r\n\t\t\t\tuniqueValueInfos: [{\r\n\t\t\t\t\t// All features with value of \"North\" will be blue\r\n\t\t\t\t\tvalue: 5,\r\n\t\t\t\t\tsymbol: {\r\n\t\t\t\t\t\ttype: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n\t\t\t\t\t\twidth: 5,\r\n\t\t\t\t\t\tcolor: \"#00A300\",\r\n\t\t\t\t\t\tstyle: \"solid\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}, {\r\n\t\t\t\t\t// All features with value of \"East\" will be green\r\n\t\t\t\t\tvalue: 4,\r\n\t\t\t\t\tsymbol: {\r\n\t\t\t\t\t\ttype: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n\t\t\t\t\t\twidth: 5,\r\n\t\t\t\t\t\tcolor: \"#00A392\",\r\n\t\t\t\t\t\tstyle: \"solid\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}, {\r\n\t\t\t\t\t// All features with value of \"East\" will be green\r\n\t\t\t\t\tvalue: 3,\r\n\t\t\t\t\tsymbol: {\r\n\t\t\t\t\t\ttype: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n\t\t\t\t\t\twidth: 5,\r\n\t\t\t\t\t\tcolor: \"#FF7A00\",\r\n\t\t\t\t\t\tstyle: \"solid\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}, {\r\n\t\t\t\t\t// All features with value of \"East\" will be green\r\n\t\t\t\t\tvalue: 2,\r\n\t\t\t\t\tsymbol: {\r\n\t\t\t\t\t\ttype: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n\t\t\t\t\t\twidth: 5,\r\n\t\t\t\t\t\tcolor: '#f9a602',\r\n\t\t\t\t\t\tstyle: \"solid\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}, {\r\n\t\t\t\t\t// All features with value of \"East\" will be green\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t\tsymbol: {\r\n\t\t\t\t\t\ttype: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n\t\t\t\t\t\twidth: 5,\r\n\t\t\t\t\t\tcolor: \"#FF0000\",\r\n\t\t\t\t\t\tstyle: \"solid\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}, {\r\n\t\t\t\t\t// All features with value of \"East\" will be green\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\tsymbol: {\r\n\t\t\t\t\t\ttype: \"simple-line\",  // autocasts as new SimpleLineSymbol()\r\n\t\t\t\t\t\tcolor: \"#D2D3D1\",\r\n\t\t\t\t\t\twidth: 5,\r\n\t\t\t\t\t\tstyle: \"solid\"\r\n\t\t\t\t\t}\r\n\t\t\t\t  }],\r\n\t\t\t\t  highlightOptions: {\r\n\t\t\t\t\tcolor: [255, 241, 58],\r\n\t\t\t\t\tfillOpacity: 0.4\r\n\t\t\t\t  }\r\n\t\t\t  };\r\n\r\n\t\t\tconst featureLayer = new FeatureLayer({\r\n\t\t\t\turl: layerURL,\r\n\t\t\t\trenderer: sidewalkColorMapRenderer\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.setState({\r\n\t\t\t\tfeatureLayer: featureLayer\r\n\t\t\t});\r\n\t \r\n\t\t\tview.when(() => {\r\n\t\t\t\t// get the first layer in the collection of operational layers in the WebMap\r\n\t\t\t\t// when the resources in the MapView have loaded.\r\n\t\t\t\t//var featureLayer = map.layers.getItemAt(0);\r\n\t\t\t\t\r\n\t\t\t\t// Desktop\r\n\t\t\t\tconst legend = new Legend({\r\n\t\t\t\t  view: view,\r\n\t\t\t\t  layerInfos: [{\r\n\t\t\t\t\tlayer: featureLayer,\r\n\t\t\t\t\ttitle: \"Sidewalk Ratings\"\r\n\t\t\t\t  }]\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t//mobile\r\n\t\t\t\tconst expandLegend = new Expand({\r\n\t\t\t\t\tview: view,\r\n\t\t\t\t\tcontent: new Legend({\r\n\t\t\t\t\t  view: view,\r\n\t\t\t\t\t  layerInfos: [{\r\n\t\t\t\t\t\tlayer: featureLayer,\r\n\t\t\t\t\t\ttitle: \"Sidewalk Ratings\"\r\n\t\t\t\t\t  }]\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Load\r\n\t\t\t\tconst isResponsiveSize = view.widthBreakpoint === \"xsmall\";\r\n\t\t\t\tupdateView(isResponsiveSize);\r\n\r\n\t\t\t\t// Breakpoints\r\n\r\n\t\t\t\tview.watch(\"widthBreakpoint\", function(breakpoint) {\r\n\t\t\t\t\tswitch (breakpoint) {\r\n\t\t\t\t\t  case \"xsmall\":\r\n\t\t\t\t\t\tupdateView(true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t  case \"small\":\r\n\t\t\t\t\t  \tupdateView(true);\r\n\t\t\t\t\t  \tbreak;\r\n\t\t\t\t\t  case \"medium\":\r\n\t\t\t\t\t  case \"large\":\r\n\t\t\t\t\t  case \"xlarge\":\r\n\t\t\t\t\t\tupdateView(false);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t  default:\r\n\t\t\t\t\t}\r\n\t\t\t\t  });\r\n\r\n\t\t\t\t  function updateView(isMobile) {\r\n\t\t\t\t\tsetLegendMobile(isMobile);\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  function setLegendMobile(isMobile) {\r\n\t\t\t\t\tvar toAdd = isMobile ? expandLegend : legend;\r\n\t\t\t\t\tvar toRemove = isMobile ? legend : expandLegend;\r\n\t\t\t\r\n\t\t\t\t\tview.ui.remove(toRemove);\r\n\t\t\t\t\tview.ui.add(toAdd, \"bottom-left\");\r\n\t\t\t\t  }\r\n\t\t\t});\r\n\r\n\t\t\t// radius to search in\r\n\t\t\tconst pxRadius = 5;\r\n\t\t\tthis.state.map.add(featureLayer);\r\n\r\n\t\t\tthis.state.view.on(\"click\", (event) => {\r\n\t\t\t\t//let pxToMeters = view.extent.width / view.width;\r\n\r\n\t\t\t\tvar highlightSelect, highlightHover;\r\n\t\t\t\tlet pxToMeters = view.extent.width / view.width;\r\n\r\n\t\t\t\t// this may be removed later \r\n\t\t\t\tfeatureLayer.popupEnabled = false;\r\n\t\t\t\tview.popup.dockEnabled = true;\r\n\t\t\t\tview.popup.visible = false;\r\n\t\t\t\tview.popup.dockOptions = {\r\n\t\t\t\t\tbuttonEnabled: false\r\n\t\t\t\t}\r\n\t\t\t\tfeatureLayer.popupTemplate = {\r\n\t\t\t\t\ttitle: \"Street ID: {osm_id}\",\r\n\t\t\t\t\tcontent: \"Average Rating: {Rating}\"\r\n\t\t\t\t}  \r\n\t\t\t\t\t\t\r\n\t\t\t\tlet c = new Circle({\r\n\t\t\t\t\tcenter: event.mapPoint,\r\n\t\t\t\t\tradius: pxRadius * pxToMeters // meters by default\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlet q = featureLayer.createQuery();\r\n\t\t\t\tq.geometry = c;\r\n\t\t\t\tfeatureLayer.queryFeatures(q).then((results) => {\r\n\t\t\t\t\tif(results.features.length !== 0){\r\n\r\n\t\t\t\t\t\tlet resultingFeatures = results.features;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// TODO: fix some sidewalks osm_id being \" \" (NaN)\r\n\t\t\t\t\t\tlet sidewalkID = parseInt(resultingFeatures[0].attributes.osm_id)\r\n\t\t\t\t\t\tlet ratingValue = parseInt(resultingFeatures[0].attributes.Rating)\r\n\t\t\t\t\t\tconst sidewalk = this.state.sidewalks.find((s) => s.id === sidewalkID);\r\n\t\t\t\t\t\tif (!sidewalk) {\r\n\t\t\t\t\t\t\tconsole.error(\"No sidewalk with a matching ID was found\");\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//Add graphic to the map graphics layer.\r\n\r\n\t\t\t\t\t\tthis.viewSidewalkDetails(sidewalk, event.mapPoint.latitude, event.mapPoint.longitude);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Updates the ratings for the currently selected sidewalk\r\n\t * @param {Object} sidewalk - the current sidewalk\r\n\t */\r\n\tonUpdateSidewalkRatings(sidewalk) {\r\n\t\tconst updatedSidewalks = this.state.sidewalks.slice();\r\n\t\tconst selectedSidewalk = updatedSidewalks.find((sidewalk) => {\r\n\t\t\treturn sidewalk.id === this.state.selectedSidewalkDetails.id;\r\n\t\t});\r\n\t\tif (!selectedSidewalk) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tselectedSidewalk.accessibility = sidewalk.accessibility;\r\n\t\tselectedSidewalk.overallRating = sidewalk.overallRating;\r\n\t\tselectedSidewalk.comfort = sidewalk.comfort;\r\n\t\tselectedSidewalk.connectivity = sidewalk.connectivity;\r\n\t\tselectedSidewalk.physicalSafety = sidewalk.physicalSafety;\r\n\t\tselectedSidewalk.senseOfSecurity = sidewalk.senseOfSecurity;\r\n\t\tthis.setState({\r\n\t\t\tsidewalks: updatedSidewalks\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Selects the specified sidewalk and displays details about it, when the user searches for the sidewalk\r\n\t */\r\n\tonSelectSidewalk(sidewalk) {\r\n\t\tif (!this.state.featureLayer) {\r\n\t\t\tthis.viewSidewalkDetails(sidewalk, this.state.latitude, this.state.longitude);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst q = this.state.featureLayer.createQuery();\r\n\t\tthis.state.featureLayer.queryFeatures(q).then((results) => {\r\n\t\t\tconst result = results.features.find((feature) => parseInt(feature.attributes.osm_id) === sidewalk.id);\r\n\t\t\tif (result) {\r\n\t\t\t\tthis.viewSidewalkDetails(sidewalk, result.geometry.extent.center.latitude, result.geometry.extent.center.longitude);\r\n\t\t\t} else {\r\n\t\t\t\tthis.viewSidewalkDetails(sidewalk, this.state.latitude, this.state.longitude);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Component } from 'reflux';\r\n\r\nimport Actions from \"./MapActions\";\r\nimport Store from \"./MapStore\";\r\n\r\nexport default class SummaryMapView extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n  \tcomponentDidMount() {\r\n\t\tActions.loadMapDetails();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"mapContainer\">\r\n\t\t\t<div id=\"BasemapToggle\"/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"uploadSidewalkImage\",\r\n\t\"loadUploadedImages\",\r\n\t\"loadSidewalkDetails\",\r\n\t\"uploadComment\",\r\n\t\"dismissImageErrorMessage\",\r\n\t\"dismissImageSuccessMessage\",\r\n\t\"uploadRatings\",\r\n\t\"removeLoadedComment\",\r\n\t\"removeLoadedImage\",\r\n\t\"dismissCommentSuccessMessage\",\r\n\t\"dismissCommentErrorMessage\",\r\n\t\"loadComments\",\r\n\t\"dismissRatingsSuccessMessage\",\r\n\t\"dismissRatingsFailureMessage\",\r\n\t\"getSidewalkRatings\"\r\n]);\r\n\r\nexport default Actions;","import Reflux from \"reflux\";\r\n\r\nimport Actions from \"./SidewalkActions\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\n/**\r\n * This store keeps track of the state of components that deal with sidewalks\r\n */\r\nexport default class SidewalkStore extends Reflux.Store {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = this._getDefaultSidewalkState();\r\n\t\tthis.listenables = Actions;\r\n\r\n\t\tif (process.env.NODE_ENV === \"development\"){\r\n\t\t\twindow.DEV_SIDEWALK_STORE = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the default state of the store before a sidewalk is selected\r\n\t * @return {Object} - the default state of the store before a sidewalk is selected\r\n\t */\r\n\t_getDefaultSidewalkState() {\r\n\t\treturn {\r\n\t\t\tloadedUserImages: [],\r\n\t\t\thasNextImagesPage: true,\r\n\t\t\tcurrentSidewalk: null,\r\n\t\t\tuploadingSidewalkImage: false,\r\n\t\t\tuploadedImageError: false,\r\n\t\t\tuploadingComment: false,\r\n\t\t\tuploadCommentFailed: false,\r\n\t\t\tuploadImageSucceeded: false,\r\n\t\t\thasNextCommentsPage: true\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Loads data about the specified sidewalk\r\n\t * @param {Object} sidewalk - a basic summary of the sidewalk to load, including it's id and average ratings\r\n\t */\r\n\tonLoadSidewalkDetails(sidewalk) {\r\n\t\tthis.setState(this._getDefaultSidewalkState());\r\n\t\tRestUtil.sendGetRequest(`sidewalk/${sidewalk.id}`).then((data) => {\r\n\t\t\tconst newSidewalk = Object.assign({}, sidewalk, data),\r\n\t\t\t\thasNextCommentsPage = newSidewalk.comments.length === 25;\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSidewalk: newSidewalk,\r\n\t\t\t\thasNextImagesPage: newSidewalk.lastImage,\r\n\t\t\t\tloadedUserImages: [newSidewalk.lastImage],\r\n\t\t\t\thasNextCommentsPage: hasNextCommentsPage\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user selecting an image to upload to a sidewalk\r\n\t * @param {String} base64Image - the image as a base64 string\r\n\t */\r\n\tonUploadSidewalkImage(base64Image) {\r\n\t\tthis.setState({\r\n\t\t\tuploadingSidewalkImage: true,\r\n\t\t\tuploadedImageError: false,\r\n\t\t\tuploadImageSucceeded: false\r\n\t\t});\r\n\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/image/create`, {\r\n\t\t\timage: base64Image\r\n\t\t}).then(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tuploadingSidewalkImage: false,\r\n\t\t\t\tuploadImageSucceeded: true\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tuploadingSidewalkImage: false,\r\n\t\t\t\tuploadedImageError: true\r\n\t\t\t});\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Loads user uploaded images from the database\r\n\t * @param {number} startIndex - the amount of images to skip before starting to return them\r\n\t * @param {number} stopIndex - the index of the last item to load\r\n\t * @param {function} updateStateCallback - a callback function that will be invoked when the images are loaded\r\n\t */\r\n\tonLoadUploadedImages(startIndex, stopIndex, updateStateCallback) {\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/image`, {\r\n\t\t\tstartIndex: startIndex,\r\n\t\t\tendIndex: stopIndex\r\n\t\t}).then((res) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\thasNextImagesPage: res.hasMoreImages,\r\n\t\t\t\tloadedUserImages: this.state.loadedUserImages.slice(0).concat(res.images)\r\n\t\t\t});\r\n\t\t\treturn updateStateCallback();\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Uploads a comment to the database for the current sidewalk\r\n\t * @param {String} comment - the comment to upload\r\n\t */\r\n\tonUploadComment(comment) {\r\n\t\tthis.setState({\r\n\t\t\tuploadingComment: true,\r\n\t\t\tuploadCommentSucceeded: false,\r\n\t\t\tuploadCommentFailed: false\r\n\t\t});\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/comment/create`, {\r\n\t\t\ttext: comment\r\n\t\t}).then((res) => {\r\n\t\t\tconst currentSidewalkComments = this.state.currentSidewalk.comments.slice();\r\n\t\t\tcurrentSidewalkComments.unshift(res);\r\n\t\t\tthis.setState({\r\n\t\t\t\tuploadingComment: false,\r\n\t\t\t\tuploadCommentSucceeded: true,\r\n\t\t\t\tcurrentSidewalk: Object.assign(this.state.currentSidewalk, { comments: currentSidewalkComments })\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tuploadingComment: false,\r\n\t\t\t\tuploadCommentFailed: true\r\n\t\t\t});\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Dismisses the message notifying the user that their comment was successfully posted\r\n\t */\r\n\tonDismissCommentSuccessMessage() {\r\n\t\tthis.setState({\r\n\t\t\tuploadCommentSucceeded: false\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message notifying the user that their comment was unable to be posted\r\n\t */\r\n\tonDismissCommentErrorMessage() {\r\n\t\tthis.setState({\r\n\t\t\tuploadCommentFailed: false\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message notifying the user that an error happened when uploading an image\r\n\t */\r\n\tonDismissImageErrorMessage() {\r\n\t\tthis.setState({\r\n\t\t\tuploadedImageError: false\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Dismisses the message notifying the user that their image was successfully uploaded\r\n\t */\r\n\tonDismissImageSuccessMessage() {\r\n\t\tthis.setState({\r\n\t\t\tuploadImageSucceeded: false\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Submits the user's ratings of the current sidewalk\r\n\t */\r\n\tonUploadRatings(accessibility, comfort, connectivity, physicalSafety, senseOfSecurity, onSuccess) {\r\n\t\tthis.setState({\r\n\t\t\tisUploadingRatings: true,\r\n\t\t\tsuccessfullyUploadedRatings: false,\r\n\t\t\tfailedUploadingRatings: false\r\n\t\t});\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/rate`, {\r\n\t\t\taccessibility: parseFloat(accessibility),\r\n\t\t\tcomfort: parseFloat(comfort),\r\n\t\t\tconnectivity: parseFloat(connectivity),\r\n\t\t\tsenseOfSecurity: parseFloat(senseOfSecurity),\r\n\t\t\tphysicalSafety: parseFloat(physicalSafety)\r\n\t\t}).then((result) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisUploadingRatings: false,\r\n\t\t\t\tsuccessfullyUploadedRatings: true\r\n\t\t\t});\r\n\t\t\treturn onSuccess();\r\n\t\t}).catch((error) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisUploadingRatings: false,\r\n\t\t\t\tfailedUploadingRatings: true\r\n\t\t\t});\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\tonDismissRatingsSuccessMessage() {\r\n\t\tthis.setState({\r\n\t\t\tsuccessfullyUploadedRatings: false\r\n\t\t});\r\n\t}\r\n\r\n\tonDismissRatingsFailureMessage() {\r\n\t\tthis.setState({\r\n\t\t\tfailedUploadingRatings: false\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the specified comment from the currently loaded sidewalk\r\n\t * @param {Object} comment - the comment to remove\r\n\t */\r\n\tonRemoveLoadedComment(comment) {\r\n\t\tconst currentSidewalkComments = this.state.currentSidewalk.comments.slice(),\r\n\t\t\tindex = currentSidewalkComments.indexOf(comment);\r\n\t\tif (index !== -1) {\r\n\t\t\tconst newTotalComments = this.state.currentSidewalk.totalComments - 1;\r\n\t\t\tcurrentSidewalkComments.splice(index, 1);\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSidewalk: Object.assign(this.state.currentSidewalk, {comments: currentSidewalkComments, totalComments: newTotalComments})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the specified image from the currently loaded sidewalk\r\n\t * @param {Object} image - the image to remove\r\n\t * @param {function} onLastImageDeleted - a callback function that will be called if the deleted image is the last loaded one\r\n\t * @param {function} onNoImagesRemaining - a callback function that will be called if there are no images remaining\r\n\t */\r\n\tonRemoveLoadedImage(image, onLastImageDeleted, onNoImagesRemaining) {\r\n\t\tconst index = this.state.loadedUserImages.indexOf(image);\r\n\t\tif (index !== -1) {\r\n\t\t\tconst newImagesCount = this.state.currentSidewalk.totalImages - 1,\r\n\t\t\t\tnewImages = this.state.loadedUserImages.slice(),\r\n\t\t\t\tsidewalkOverride = {totalImages: newImagesCount};\t\t\t\r\n\t\t\tnewImages.splice(index, 1);\r\n\t\t\tif (this.state.currentSidewalk.lastImage === image) {\r\n\t\t\t\tsidewalkOverride.lastImage = newImages[0] || null;\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSidewalk: Object.assign(this.state.currentSidewalk, sidewalkOverride),\r\n\t\t\t\tloadedUserImages: newImages\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (index === newImages.length && index > 0) {\r\n\t\t\t\tonLastImageDeleted(index);\r\n\t\t\t}\r\n\t\t\tif (newImages.length === 0) {\r\n\t\t\t\treturn onNoImagesRemaining();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Loads comments from the database\r\n\t * @param {number} startIndex - the amount of images to skip before starting to return them\r\n\t * @param {number} endIndex - the index of the last item to load\r\n\t * @param {function} updateStateCallback - a callback function that will be invoked when the comments are loaded\r\n\t */\r\n\tonLoadComments(startIndex, endIndex, updateStateCallback) {\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${this.state.currentSidewalk.id}/comment`, {\r\n\t\t\tstartIndex: startIndex,\r\n\t\t\tendIndex: endIndex\r\n\t\t}).then((res) => {\r\n\t\t\tconst currentSidewalkComments = this.state.currentSidewalk.comments.slice().concat(res.comments);\r\n\t\t\tthis.setState({\r\n\t\t\t\thasNextCommentsPage: res.hasMoreComments,\r\n\t\t\t\tcurrentSidewalk: Object.assign(this.state.currentSidewalk, { comments: currentSidewalkComments })\r\n\t\t\t});\r\n\t\t\treturn updateStateCallback();\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Loads rating information for the currently selected sidewalk\r\n\t * @param {function} successCallback - a callback function that will be invoked when the ratings are updated\r\n\t */\r\n\tonGetSidewalkRatings(successCallback) {\r\n\t\tRestUtil.sendGetRequest(`sidewalk/${this.state.currentSidewalk.id}/ratings`).then((res) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentSidewalk: Object.assign(this.state.currentSidewalk, res)\r\n\t\t\t});\r\n\t\t\treturn successCallback();\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n}","const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n/**\r\n * Gets the time component of the specified date in HH:MM format\r\n * @param {Date} date - the date to format\r\n * @return {String} - the outputted time of the date in HH:MM format\r\n */\r\nconst getTimeDisplay = (date) => {\r\n\tconst hours = (\"0\" + date.getHours()).slice(-2);\r\n\tconst minutes = (\"0\" + date.getMinutes()).slice(-2);\r\n\treturn hours + \":\" + minutes;\r\n};\r\n\r\n/**\r\n * Provides utility functions for working with dates\r\n */\r\nexport default class DateUtilities {\r\n\r\n\t/**\r\n\t * Formates a date object for display on the UI\r\n\t * @param {Date} date - the date to format\r\n\t * @return {String} - the formatted date to display\r\n\t */\r\n\tstatic formatDateForDisplay(date) {\r\n\t\treturn months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear() + \" - \" + getTimeDisplay(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the name of the month matching the specified month number\r\n\t * @param {number} monthNumber - the month number to get the name of (1 - 12)\r\n\t * @return {String} - the name of the month matching the specified month number\r\n\t */\r\n\tstatic getMonthName(monthNumber) {\r\n\t\treturn months[monthNumber - 1];\r\n\t}\r\n}","import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"deleteComment\",\r\n\t\"dismissCommentSuccessMessage\",\r\n\t\"dismissCommentErrorMessage\",\r\n\t\"checkCredentials\",\r\n\t\"deleteImage\",\r\n\t\"dismissImageSuccessMessage\",\r\n\t\"dismissImageErrorMessage\",\r\n\t\"dismissLoginSuccess\", \r\n\t\"dismissLoginError\",\r\n\t\"getUnapprovedImages\",\r\n\t\"handlePendingImages\",\r\n\t\"dismissImageApprovalNotification\",\r\n\t\"dismissImageRejectionNotification\"\r\n]);\r\n\r\nexport default Actions;","import Reflux from \"reflux\";\r\n\r\nimport Actions from \"./AdminActions\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\n/**\r\n * This store keeps track of the state of components that deal with administrator actions\r\n */\r\nexport default class AdminStore extends Reflux.Store {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\t\t\tisLoggedIn: false,\r\n\t\t\tisDeletingComment: false,\r\n\t\t\tsuccessfullyDeletedComment: false,\r\n\t\t\tfailedDeleteComment: false,\r\n\t\t\tusername: \"\",\r\n\t\t\tpassword: \"\",\r\n\t\t\tcredentialError: false,\r\n\t\t\tpendingImages: []\r\n\t\t};\r\n        this.listenables = Actions;\r\n\r\n\t\tif (process.env.NODE_ENV === \"development\"){\r\n\t\t\twindow.DEV_ADMIN_STORE = this;\r\n\t\t}\r\n    }\r\n\r\n\t/**\r\n\t * Handles attempting to delete a comment\r\n\t * @param {String} sidewalkId - the ID of the sidewalk the comment is linked to\r\n\t * @param {String} commentId - the ID of the comment to delete\r\n\t * @param {function} onFinish - callback function that is called once the request has been resolved. \r\n\t *\t\t\t\t\t The first parameter indicates whether the request was succesful or not\r\n\t */\r\n\tonDeleteComment(sidewalkId, commentId, onFinish) {\r\n\t\tthis.setState({\r\n\t\t\tisDeletingComment: true,\r\n\t\t\tsuccessfullyDeletedComment: false,\r\n\t\t\tfailedDeleteComment: false\r\n\t\t});\r\n\t\t\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${sidewalkId}/comment/delete`, {\r\n\t\t\tid: commentId,\r\n\t\t\tusername: this.state.username,\r\n\t\t\tpassword: this.state.password\r\n\t\t}).then(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisDeletingComment: false,\r\n\t\t\t\tsuccessfullyDeletedComment: true\r\n\t\t\t});\r\n\t\t\treturn onFinish(true);\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisDeletingComment: false,\r\n\t\t\t\tfailedDeleteComment: true\r\n\t\t\t});\r\n\t\t\tonFinish(false);\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message that notifies the user that they have successfully deleted a comment\r\n\t */\r\n\tonDismissCommentSuccessMessage() {\r\n\t\tthis.setState({\r\n\t\t\tsuccessfullyDeletedComment: false\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message that notifies the user that they have failed to deleted a comment\r\n\t */\r\n\tonDismissCommentErrorMessage() {\r\n\t\tthis.setState({\r\n\t\t\tfailedDeleteComment: false\r\n\t\t});\r\n\t}\r\n\r\n\tonCheckCredentials(user, pass) {\r\n\t\tRestUtil.sendPostRequest('adminAccount/login',{\r\n\t\t\tusername: user,\r\n\t\t\tpassword: pass\r\n\t\t}).then((res) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisLoggedIn: true,\r\n\t\t\t\tsuccessfullyLoggedIn: true,\r\n\t\t\t\tusername: user,\r\n\t\t\t\tpassword: pass\r\n\t\t\t});\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisLoggedIn: false,\r\n\t\t\t\tfailedToLogIn: true\r\n\t\t\t});\r\n\t\t\tconsole.error(err)\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles attempting to delete an image\r\n\t * @param {String} sidewalkId - the ID of the sidewalk the image is linked to\r\n\t * @param {String} imageId - the ID of the image to delete\r\n\t * @param {function} onFinish - callback function that is called once the request has been resolved. \r\n\t *\t\t\t\t\t The first parameter indicates whether the request was succesful or not\r\n\t */\r\n\tonDeleteImage(sidewalkId, imageId, onFinish){\r\n\t\tthis.setState({\r\n\t\t\tisDeletingImage: true,\r\n\t\t\tsuccessfullyDeletedImage: false,\r\n\t\t\tfailedDeleteImage: false\r\n\t\t});\r\n\t\t\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${sidewalkId}/image/delete`, {\r\n\t\t\timageId: imageId,\r\n\t\t\tusername: this.state.username,\r\n\t\t\tpassword: this.state.password\r\n\t\t}).then(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisDeletingImage: false,\r\n\t\t\t\tsuccessfullyDeletedImage: true\r\n\t\t\t});\r\n\t\t\treturn onFinish(true);\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisDeletingImage: false,\r\n\t\t\t\tfailedDeleteImage: true\r\n\t\t\t});\r\n\t\t\tconsole.error(err);\r\n\t\t\treturn onFinish(false);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message that notifies the user that they have successfully deleted an image\r\n\t */\r\n\tonDismissImageSuccessMessage() {\r\n\t\tthis.setState({\r\n\t\t\tsuccessfullyDeletedImage: false\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message that notifies the user that they have failed to deleted an image\r\n\t */\r\n\tonDismissImageErrorMessage(){\r\n\t\tthis.setState({\r\n\t\t\tfailedDeleteImage: false\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Dismisses the message that notifies the user that they have successfully deleted a comment\r\n\t */\r\n\tonDismissLoginSuccess() {\r\n\t\tthis.setState({\r\n\t\t\tsuccessfullyLoggedIn: false\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Dismisses the message that notifies the user that they have successfully deleted a comment\r\n\t */\r\n\tonDismissLoginError() {\r\n\t\tthis.setState({\r\n\t\t\tfailedToLogIn: false\r\n\t\t});\r\n\t}\r\n\t\r\n\t// TODO: remove hardcoded sidewalkId value\r\n\tonHandlePendingImages(accepted, imageId, sidewalkId = \"2\") {\r\n\t\tthis.setState({\r\n\t\t\trespondingToImage: true,\r\n\t\t\tsuccessfullyRespondedToImage: false,\r\n\t\t\tfailedToRespondToImage: false\r\n\t\t});\r\n\t\tRestUtil.sendPostRequest(`sidewalk/${sidewalkId}/image/respond`, {\r\n\t\t\tusername: this.state.username,\r\n\t\t\tpassword: this.state.password,\r\n\t\t\taccepted: accepted,\r\n\t\t\timageId: imageId\r\n\t\t}).then((result) => {\r\n\t\t\tconst newImages = this.state.pendingImages.filter((image) => image.id !== imageId);\r\n\t\t\tthis.setState({\r\n\t\t\t\trespondingToImage: false,\r\n\t\t\t\tsuccessfullyRespondedToImage: true,\r\n\t\t\t\tpendingImages: newImages\r\n\t\t\t});\r\n\t\t}).catch((error) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\trespondingToImage: false,\r\n\t\t\t\tfailedToRespondToImage: true\r\n\t\t\t});\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\tonGetUnapprovedImages(startIndex, endIndex, onSuccess) {\r\n\t\tRestUtil.sendPostRequest(`sidewalk/unapprovedImages`, { \r\n\t\t\tusername: this.state.username,\r\n\t\t\tpassword: this.state.password,\r\n\t\t\tstartIndex: startIndex,\r\n\t\t\tendIndex: endIndex\r\n\t\t}).then((result) => {\r\n\t\t\tconst newImages = this.state.pendingImages.slice().concat(result.images);\r\n\t\t\tthis.setState({\r\n\t\t\t\thasMoreImages: result.hasMoreImages,\r\n\t\t\t\tpendingImages: newImages\r\n\t\t\t});\r\n\t\t\treturn onSuccess();\r\n\t\t}).catch((error) => {\r\n\t\t\tconsole.error(error);\r\n\t\t})\r\n\t}\r\n\t\r\n\tonDismissImageApprovalNotification() {\r\n\t\tthis.setState({\r\n\t\t\tsuccessfullyRespondedToImage: false,\r\n\t\t});\r\n\t}\r\n\t\r\n\tonDismissImageRejectionNotification() {\r\n\t\tthis.setState({\r\n\t\t\tfailedToRespondToImage: false,\r\n\t\t});\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport DateUtilities from \"../util/DateUtilities\";\r\nimport Store from \"../admin/AdminStore\";\r\n\r\n/**\r\n * This class renders details about a comment left on a sidewalk\r\n */\r\nexport default class SidewalkCommentComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\t_handleDelete = () => {\r\n\t\tthis.props.onDelete(this.props.details);\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Card className=\"commentDisplayBox\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.isLoggedIn && (\r\n\t\t\t\t\t\t<CloseIcon onClick={this._handleDelete} className=\"closeButton\" />\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<h5>{this.props.details.text}</h5>\r\n\t\t\t\t<h6>{DateUtilities.formatDateForDisplay(new Date(this.props.details.date))}</h6>\r\n\t\t\t</Card>\r\n\t\t)\r\n\t}\r\n}","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n/**\r\n * This component represents the loading spinner that is displayed when an asynchronous action is performed\r\n */\r\nexport default class LoaderComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\treturn <CircularProgress />;\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport {Modal, Button} from \"react-bootstrap\";\r\n\r\nimport MaterialModal from '@material-ui/core/Modal';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  paper: {\r\n    width: \"50%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing.unit * 4,\r\n\tmargin: \"auto\",\r\n\tposition: \"relative\",\r\n\ttop: \"50%\",\r\n\ttransform: \"translateY(-50%)\"\r\n  },\r\n});\r\n\r\n/**\r\n * This component renders a modal that allows the user to select an image from their local files,\r\n * and then upload that image to the database. The user's selected image will be previewed in this modal.\r\n */\r\nclass ConfirmationModal extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user closing the modal\r\n\t */\r\n\t_cancel = () => {\r\n\t\tthis.props.onCancel();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user selecting the confirm button\r\n\t */\r\n\t_confirm = () => {\r\n\t\tthis.props.onConfirm();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<MaterialModal\r\n\t\t\t  open={this.props.visible}\r\n\t\t\t  onClose={this._cancel}\r\n\t\t\t>\r\n\t\t\t\t<div className={classes.paper}>\r\n\t\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t\t<Modal.Title>{this.props.title}</Modal.Title>\r\n\t\t\t\t\t</Modal.Header>\r\n\t\t\t\t\t<div className=\"marginUpDown15\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.props.body\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t<Button onClick={this._cancel}>Cancel</Button>\r\n\t\t\t\t\t\t<Button bsStyle=\"primary\" onClick={this._confirm} disabled={this.props.disabledConfirm}>Confirm</Button>\r\n\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</div>\r\n\t\t\t</MaterialModal>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default withStyles(styles)(ConfirmationModal)","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\nimport ConfirmationModal from \"../misc-components/ConfirmationModal\";\r\n\r\nimport Store from \"../admin/AdminStore\";\r\nimport Actions from \"../admin/AdminActions\";\r\n\r\n/**\r\n * This component renders a modal that allows an administrator to delete a user's comment on a sidewalk\r\n */\r\nexport default class CommentDeletionModal extends Reflux.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.store = Store;\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user closing the modal\r\n\t */\r\n\t_cancel = () => {\r\n\t\tthis.props.onClose();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user selecting the confirm button\r\n\t */\r\n\t_confirm = () => {\r\n\t\tActions.deleteComment(this.props.sidewalkId, this.props.comment.id, (success) => {\r\n\t\t\tif (success) {\r\n\t\t\t\tthis.props.onClose(true);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\t\r\n\trenderModalBody() {\r\n\t\tif (!this.props.visible) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p className=\"wrapText\">{this.props.comment.text}</p>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.isDeletingComment && <LoaderComponent />\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ConfirmationModal title=\"Are you sure you want to delete this comment?\"\r\n\t\t\t\t\t\t\t   body={this.renderModalBody()}\r\n\t\t\t\t\t\t\t   onCancel={this._cancel}\r\n\t\t\t\t\t\t\t   onConfirm={this._confirm}\r\n\t\t\t\t\t\t\t   visible={this.props.visible}\r\n\t\t\t\t\t\t\t   disabledConfirm={this.state.isDeletingComment}\r\n\t\t    />\r\n\t\t)\r\n\t}\r\n\r\n}\r\n","export const COMMENTS_PER_PAGE = 25,\r\n\tCOMMENT_ERROR_STATE = \"error\",\r\n\tCOMMENT_PROFANITY_MESSAGE = \"This comment has profanity or personal information in it.\",\r\n\tEMPTY_COMMENT_MESSAGE = \"You can not post an empty comment.\",\r\n\t// taken from https://stackoverflow.com/a/39418863\r\n\tPHONE_REGEX = /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?/img,\r\n\tSECONDARY_PHONE_REGEX = /[0-9]{3}.[0-9]{3}.[0-9]{4}/;","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\nimport { Button, FormGroup, FormControl, Alert } from \"react-bootstrap\";\r\nimport Filter from \"bad-words\";\r\nimport swearsList from \"bad-words/lib/lang\";\r\n\r\nimport SidewalkStore from \"./SidewalkStore\";\r\nimport SidewalkActions from \"./SidewalkActions\";\r\nimport SidewalkCommentComponent from \"./SidewalkCommentComponent\";\r\nimport CommentDeletionModal from \"./CommentDeletionModal\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\n\r\nimport {COMMENTS_PER_PAGE, COMMENT_ERROR_STATE, COMMENT_PROFANITY_MESSAGE, EMPTY_COMMENT_MESSAGE, PHONE_REGEX, SECONDARY_PHONE_REGEX} from \"../constants/CommentConstants\";\r\n\r\nconst filter = new Filter({ replaceRegex: /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im, placeHolder: \"*\"});\r\nfilter.addWords('@');\r\n\r\n/**\r\n * This class renders the list of all comments left on a sidewalk, as well as the form for\r\n * posting new comments\r\n */\r\nexport default class CommentsListComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = SidewalkStore;\r\n\t\tthis.state = {\r\n\t\t\tenteredComment: \"\",\r\n\t\t\tmodalOpened: false,\r\n\t\t\tisLoadingComments: false,\r\n\t\t\tcurrentPage: 0,\r\n\t\t\tcommentValidation: {\r\n\t\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\t\tmessage: EMPTY_COMMENT_MESSAGE\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Determines whether the current input text is valid or not\r\n\t * @param {String} comment - the comment to validate\r\n\t * @return {Object} - details about whether the input text is valid or not\r\n\t * {\r\n\t *\t\tstate: \t a representation whether the current comment text can be posted or not (\"error\" or \"success\")\r\n\t *\t\tmessage: a reason why the comment can not be posted, if state is error\r\n\t * }\r\n\t */\r\n\t_validateCommentState = (comment) => {\r\n\t\tconst length = comment.length;\r\n\t\tif (filter.isProfane(comment)) {\r\n\t\t\treturn {\r\n\t\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\t\tmessage: COMMENT_PROFANITY_MESSAGE\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tif (comment.match(PHONE_REGEX)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\t\t\tmessage: `This comment contains a phone number: ${comment.match(PHONE_REGEX)[0]}`\r\n\t\t\t\t};\r\n\t\t\t} else if (comment.match(SECONDARY_PHONE_REGEX)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\t\t\tmessage: `This comment contains a phone number: ${comment.match(SECONDARY_PHONE_REGEX)[0]}`\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (length === 0) {\r\n\t\t\treturn {\r\n\t\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\t\tmessage: EMPTY_COMMENT_MESSAGE\r\n\t\t\t};\r\n\t\t} else if (length <= 300) {\r\n\t\t\treturn {\r\n\t\t\t\tstate: \"success\",\r\n\t\t\t\tmessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\tmessage: \"Comments can be no more than 300 characters.\"\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs extra validation of the specified comment to make sure it does not have swears\r\n\t * Separated from _validateCommentState() due to performance reasons\r\n\t * @param {String} comment - the comment to validate\r\n\t * @return {Object} - details about whether the input text is valid or not\r\n\t * {\r\n\t *\t\tstate: \t a representation whether the current comment text can be posted or not (\"error\" or \"success\")\r\n\t *\t\tmessage: a reason why the comment can not be posted, if state is error\r\n\t * }\r\n\t */\r\n\t_validateSubstringSwears = (comment) => {\r\n\t\tfor (const swear of swearsList.words) {\r\n\t\t\tif (swear === \"hell\" || swear.includes(\"as\")) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (comment.toLowerCase().includes(swear)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstate: COMMENT_ERROR_STATE,\r\n\t\t\t\t\tmessage: COMMENT_PROFANITY_MESSAGE\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: \"success\",\r\n\t\t\tmessage: \"\"\r\n\t\t};\r\n\t};\r\n\t\r\n\t_onCommentBlur = () => {\r\n\t\tconst validation = this._validateSubstringSwears(this.state.enteredComment);\r\n\t\tif (validation.state === COMMENT_ERROR_STATE) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcommentValidation: validation\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user changing their comment text value\r\n\t */\r\n\t_handleChange = (e) => {\r\n\t\tthis.setState({ \r\n\t\t\tenteredComment: e.target.value,\r\n\t\t\tcommentValidation: this._validateCommentState(e.target.value)\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user submitting their entered comment text\r\n\t */\r\n\t_handleSubmit = () => {\r\n\t\tconst validateComment = this._validateSubstringSwears(this.state.enteredComment);\r\n\t\tif (validateComment.state === COMMENT_ERROR_STATE) {\r\n\t\t\tthis.setState({commentValidation: validateComment});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSidewalkActions.uploadComment(this.state.enteredComment);\r\n\t\tthis.setState({\r\n\t\t\tenteredComment: \"\",\r\n\t\t\tcommentValidation: this._validateCommentState(\"\")\r\n\t\t});\r\n\t}\r\n\t\r\n\t_openConfirmationModal = (selectedComment) => {\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: true,\r\n\t\t\tselectedComment: selectedComment\r\n\t\t});\r\n\t};\r\n\t\r\n\t_closeConfirmationModal = (deleted) => {\r\n\t\tif (deleted) {\r\n\t\t\tSidewalkActions.removeLoadedComment(this.state.selectedComment);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: false,\r\n\t\t\tselectedComment: null\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets whether the specified item is loaded\r\n\t * @param {number} index - the index of the item in the list of all loaded items\r\n\t * @return {boolean} - whether the specified item is loaded\r\n\t */\r\n\t_isRowLoaded = ({index}) => {\r\n\t\treturn Boolean(this.state.currentSidewalk.comments[index]);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Loads more items\r\n\t * @param {number} startIndex - the starting index of new items to load\r\n\t * @param {number} stopIndex - the ending index of new items to load\r\n\t */\r\n\t_loadMoreRows = (startIndex, stopIndex) => {\r\n\t\tthis.setState({\r\n\t\t\tisLoadingComments: true\r\n\t\t});\r\n\t\tSidewalkActions.loadComments(startIndex, stopIndex + 24, () => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisLoadingComments: false\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets all comments loaded on the current page\r\n\t * @param {index} - the page index\r\n\t * @return {Array<Object>} - a list of all comments on the page\r\n\t */\r\n\t_getCommentsOnPage = (index) => {\r\n\t\treturn this.state.currentSidewalk.comments.slice(index * COMMENTS_PER_PAGE, (index * COMMENTS_PER_PAGE) + COMMENTS_PER_PAGE)\r\n\t};\r\n\t\r\n\t/**\r\n\t * Loads the previous comments page\r\n\t */\r\n\t_visitPreviousPage = () => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentPage: this.state.currentPage - 1\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * loads the next comments page\r\n\t */\r\n\t_visitNextPage = () => {\r\n\t\tif (this._getCommentsOnPage(this.state.currentPage + 1).length === 0) {\r\n\t\t\tthis._loadMoreRows(this.state.currentSidewalk.comments.length, this.state.currentSidewalk.comments.length + 25);\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentPage: this.state.currentPage + 1\r\n\t\t});\r\n\t};\r\n\t\r\n\trenderCurrentCommentsPage() {\r\n\t\tconst comments = this._getCommentsOnPage(this.state.currentPage);\r\n\t\tif (comments.length === 0 && this.state.hasNextCommentsPage) {\r\n\t\t\treturn <LoaderComponent />;\r\n\t\t}\r\n\r\n\t\treturn comments.map((details, index) => {\r\n\t\t\treturn <SidewalkCommentComponent details={details} key={index} onDelete={this._openConfirmationModal} />\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tif (!this.state.currentSidewalk) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst comments = this.state.currentSidewalk.comments;\r\n\t\treturn (\r\n\t\t\t<div className=\"comments\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.commentValidation.message.length > 0 && (\r\n\t\t\t\t\t\t<Alert bsStyle=\"danger\">\r\n\t\t\t\t\t\t\t{this.state.commentValidation.message}\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"commentBox\">\r\n\t\t\t\t\t\t<FormGroup\r\n\t\t\t\t\t\t\tbsSize=\"small\"\r\n\t\t\t\t\t\t\tcontrolId=\"formBasicText\"\r\n\t\t\t\t\t\t\tvalidationState={this.state.commentValidation.state}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\t\tcomponentClass=\"textarea\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.enteredComment}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter a comment\"\r\n\t\t\t\t\t\t\t\tonChange={this._handleChange}\r\n\t\t\t\t\t\t\t\tonBlur={this._onCommentBlur}\r\n\t\t\t\t\t\t\t\trows={4}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<FormControl.Feedback />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Button bsStyle=\"primary\" onClick={this._handleSubmit} disabled={this.state.uploadingComment || this.state.commentValidation.state === COMMENT_ERROR_STATE} >\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</Button>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.uploadingComment && (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tUploading...\r\n\t\t\t\t\t\t\t<LoaderComponent />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<hr />\r\n\t\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.currentPage > 0 && <span className=\"icon glyphicon glyphicon-arrow-left\" onClick={this._visitPreviousPage} />\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(this.state.hasNextCommentsPage || this._getCommentsOnPage(this.state.currentPage + 1).length > 0) && <span className=\"nextIcon glyphicon glyphicon-arrow-right\" onClick={this._visitNextPage} />\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"commentDisplaySection\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.renderCurrentCommentsPage()\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<CommentDeletionModal comment={this.state.selectedComment}\r\n\t\t\t\t\t\t\t\t\t  sidewalkId={this.state.currentSidewalk.id}\r\n\t\t\t\t\t\t\t\t\t  onClose={this._closeConfirmationModal}\r\n\t\t\t\t\t\t\t\t\t  visible={this.state.modalOpened} />\r\n\t\t\t</div >\r\n\r\n\t\t);\r\n\t}\r\n}","export const\r\n\t/**\r\n\t * Converts bytes into megabytes\r\n\t * @param {number} bytes - the amount in bytes to convert\r\n\t * @return {number} - the input bytes value represented in megabytes form\r\n\t */\r\n\tbytesToMB = (bytes) => {\r\n\t\treturn bytes / 1048576;\r\n\t},\r\n\t/**\r\n\t * Gets a base64 encoded string of a file that a user has selected to upload\r\n\t * @param {Object} file - the file that the user has selected\r\n\t * @return {Promise} - a promise that resolves with the base64 string\r\n\t */\r\n\tgetFile = (file) => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.onerror = (err) => {\r\n\t\t\t\treader.abort();\r\n\t\t\t\treject(err);\r\n\t\t\t};\r\n\t\t\treader.onload = function() {\r\n\t\t\t\tresolve(this.result);\r\n\t\t\t};\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t});\r\n\t};","import React from \"react\";\r\nimport {Button, FormControl} from \"react-bootstrap\";\r\n\r\n/**\r\n * This component allows the user to select an image to upload, and it displays the name of the current\r\n * selected image.\r\n */\r\nexport default class ImageSelectorComponent extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<FormControl\r\n\t\t\t\t   readOnly\r\n\t\t\t\t   type=\"text\"\r\n\t\t\t\t   placeholder={this.props.fileName || \"No file selected\"}\r\n\t\t\t\t />\r\n\t\t\t\t<Button\r\n\t\t\t\t\tonClick={() => this.fileInput.click()}\r\n\t\t\t\t\tbsStyle=\"primary\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\t\tonChange={this.props.onSelect}\r\n\t\t\t\t\t\t\tclassName=\"uploadImageInput\"\r\n\t\t\t\t\t\t\tref={(fileInput) => {this.fileInput = fileInput;}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<span className=\"imageComponentButtonText\">\r\n\t\t\t\t\t\t\tChoose File\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}","import React from \"react\";\r\nimport {Modal, Button, Alert} from \"react-bootstrap\";\r\n\r\nimport MaterialModal from '@material-ui/core/Modal';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport {getFile, bytesToMB} from \"../util/FileUtilities\";\r\nimport ImageSelectorComponent from \"./ImageSelectorComponent\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\nimport {MAX_UPLOAD_SIZE} from \"../constants/DatabaseConstants\";\r\n\r\nconst styles = theme => ({\r\n  paper: {\r\n    width: \"50%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing.unit * 4,\r\n\tmargin: \"auto\",\r\n\tposition: \"relative\",\r\n\ttop: \"50%\",\r\n\ttransform: \"translateY(-50%)\"\r\n  },\r\n});\r\n\r\n/**\r\n * This component renders a modal that allows the user to select an image from their local files,\r\n * and then upload that image to the database. The user's selected image will be previewed in this modal.\r\n */\r\nclass ImageUploadModal extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user making a selection in the file selection dialog\r\n\t * @param {Object} event - the event representing the file selection interaction\r\n\t */\r\n\t_selectImageToUpload = (event) => {\r\n\t\tconst file = event.target.files[0];\r\n\t\tif (file && file.size <= MAX_UPLOAD_SIZE) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tloadingSelectedImage: true,\r\n\t\t\t\tselectedImageSize: null,\r\n\t\t\t\tselectedImage: null,\r\n\t\t\t\tselectedFileName: file.name\r\n\t\t\t});\r\n\t\t\tgetFile(file).then((res) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tselectedImage: res,\r\n\t\t\t\t\tselectedImageSize: file.size,\r\n\t\t\t\t\tloadingSelectedImage: false\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else if (!this.state.selectedImage || (file && file.size > MAX_UPLOAD_SIZE)) {\r\n\t\t\t// don't overwrite any existing selected image\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedImageSize: file && file.size,\r\n\t\t\t\tselectedImage: null,\r\n\t\t\t\tselectedFileName: file && file.name,\r\n\t\t\t\tloadingSelectedImage: false\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets whether the large image size warnings should be rendered or not\r\n\t * @return {boolean} - whether the large image size warnings should be rendered or not\r\n\t */\r\n\t_shouldDisplaySizeWarning = () => {\r\n\t\treturn Boolean(this.state.selectedImageSize && this.state.selectedImageSize > MAX_UPLOAD_SIZE);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets whether the upload image should be active or not\r\n\t * @return {boolean} - whether the upload image should be active or not\r\n\t */\r\n\t_canUpload = () => {\r\n\t\treturn Boolean(this.state.selectedImage && this.state.selectedImageSize <= MAX_UPLOAD_SIZE);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user closing the modal without uploading the image\r\n\t */\r\n\t_cancel = () => {\r\n\t\tthis.setState({\r\n\t\t\tselectedImage: null,\r\n\t\t\tselectedImageSize: null,\r\n\t\t\tselectedFileName: null,\r\n\t\t\tloadingSelectedImage: false\r\n\t\t});\r\n\t\tthis.props.onClose();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user selecting the upload button\r\n\t */\r\n\t_confirmUpload = () => {\r\n\t\tthis.props.onClose(this.state.selectedImage);\r\n\t\tthis.setState({\r\n\t\t\tselectedImage: null,\r\n\t\t\tselectedImageSize: null,\r\n\t\t\tselectedFileName: null,\r\n\t\t\tloadingSelectedImage: false\r\n\t\t});\r\n\t};\r\n\t\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<MaterialModal\r\n\t\t\t  open={this.props.visible}\r\n\t\t\t  onClose={this._cancel}\r\n\t\t\t>\r\n\t\t\t\t<div className={classes.paper}>\r\n\t\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t\t<Modal.Title>Upload Image</Modal.Title>\r\n\t\t\t\t\t</Modal.Header>\r\n\t\t\t\t\t<div className=\"marginUpDown15\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis._shouldDisplaySizeWarning() && (\r\n\t\t\t\t\t\t\t\t<Alert bsStyle=\"danger\">\r\n\t\t\t\t\t\t\t\t\tThat image is too large. The selected image should be no more than {Math.floor(bytesToMB(MAX_UPLOAD_SIZE))} megabytes.\r\n\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<ImageSelectorComponent onSelect={this._selectImageToUpload} fileName={this.state.selectedFileName} />\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.selectedImage && (\r\n\t\t\t\t\t\t\t\t<div className=\"selectedImagePreview\">\r\n\t\t\t\t\t\t\t\t\t<img className=\"img-responsive\" alt=\"selected\" src={this.state.selectedImage} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.loadingSelectedImage && <LoaderComponent />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t<Button onClick={this._cancel}>Cancel</Button>\r\n\t\t\t\t\t\t<Button bsStyle=\"primary\" onClick={this._confirmUpload} disabled={!this._canUpload()}>Upload</Button>\r\n\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</div>\r\n\t\t\t</MaterialModal>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default withStyles(styles)(ImageUploadModal)","import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n/**\r\n * This component represents the \"Upload Image\" button that is visible on a Sidewalk's details\r\n */\r\nexport default class UploadSidewalkImageComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Button bsStyle=\"primary\" onClick={this.props.onClick}>\r\n\t\t\t\t<span className=\"glyphicon glyphicon-camera\" />\r\n\t\t\t\t<span className=\"uploadSidewalkImageText\">\r\n\t\t\t\t\tUpload Image\r\n\t\t\t\t</span>\r\n\t\t\t</Button>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n/**\r\n * This component represents the view where the user can select to see all images uploaded to a sidewalk\r\n */\r\nexport default class PreviewSidewalkImagesComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\tif (this.props.imageCount === 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<h5>Nobody has uploaded images yet for this sidewalk.</h5>\r\n\t\t\t)\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"previewSidewalkImages\">\r\n\t\t\t\t<Button bsStyle=\"primary\" onClick={this.props.onClick}>\r\n\t\t\t\t\t\tView {this.props.imageCount} images\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../SidewalkStore\";\r\nimport Actions from \"../SidewalkActions\";\r\n\r\nimport ImageUploadModal from \"../../images/ImageUploadModal\";\r\nimport UploadSidewalkImageComponent from \"./UploadSidewalkImageComponent\";\r\nimport PreviewSidewalkImagesComponent from \"./PreviewSidewalkImagesComponent\";\r\nimport LoaderComponent from \"../../misc-components/LoaderComponent\";\r\n\r\n/**\r\n * This component renders the image section of the sidewalk drawer\r\n */\r\nexport default class SidewalkImageDetailsComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t\tthis.state = {\r\n\t\t\tmodalOpened: false\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Opens up the uploaded images view\r\n\t */\r\n\t_viewImages = () => {\r\n\t\tthis.props.onOpenImages();\r\n\t};\r\n\r\n\t/**\r\n\t * Opens the modal allowing the user to upload images\r\n\t */\r\n\t_openImageModal = () => {\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: true\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Closes the image upload modal\r\n\t * @param {String?} - the base64 encoded string representing the image the user uploaded if valid, or undefined otherwise\r\n\t */\r\n\t_closeImageModal = (uploadedFile) => {\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: false\r\n\t\t});\r\n\t\tif (uploadedFile) {\r\n\t\t\tActions.uploadSidewalkImage(uploadedFile);\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tif (!this.state.currentSidewalk) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<PreviewSidewalkImagesComponent imageCount={this.state.currentSidewalk.totalImages} previewImage={this.state.currentSidewalk.lastImage} onClick={this._viewImages} />\r\n\t\t\t\t<UploadSidewalkImageComponent onClick={this._openImageModal} />\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.uploadingSidewalkImage && (\r\n\t\t\t\t\t\t<div className=\"marginTop10\">\r\n\t\t\t\t\t\t\t<span className=\"marginRight10\">Uploading...</span>\r\n\t\t\t\t\t\t\t<LoaderComponent />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t<ImageUploadModal visible={this.state.modalOpened} onClose={this._closeImageModal} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { FONT_FAMILY } from \"../constants/ThemeConstants\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\",\r\n  },\r\n  tableCell: {\r\n\t  fontSize: \"14px\",\r\n\t  fontWeight: theme.typography.fontWeightRegular,\r\n\t  fontFamily: FONT_FAMILY\r\n  }\r\n});\r\n\r\n/**\r\n * This component renders a table displaying details about the distribution of each activity that pedestrians\r\n * were tracked doing on a sidewalk\r\n */\r\nclass PedestrianDataComponent extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {classes} = this.props;\r\n\t\treturn (\r\n\t\t\t<Paper className={classes.root}>\r\n\t\t\t  <Table>\r\n\t\t\t\t<TableHead>\r\n\t\t\t\t  <TableRow>\r\n\t\t\t\t\t<TableCell className={classes.tableCell}>Activity</TableCell>\r\n\t\t\t\t\t<TableCell className={classes.tableCell} numeric>Percentage</TableCell>\r\n\t\t\t\t  </TableRow>\r\n\t\t\t\t</TableHead>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t  {this.props.activities.map((row, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t  <TableRow key={index}>\r\n\t\t\t\t\t\t<TableCell className={classes.tableCell} component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t  {row.type}\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t<TableCell className={classes.tableCell} numeric>{row.distributionPercent * 100}</TableCell>\r\n\t\t\t\t\t  </TableRow>\r\n\t\t\t\t\t);\r\n\t\t\t\t  })}\r\n\t\t\t\t</TableBody>\r\n\t\t\t  </Table>\r\n\t\t\t</Paper>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(PedestrianDataComponent);","export const SECONDARY_COLOUR = \"#FFEB3B\",\r\n\tFONT_FAMILY = \"Proza Libre\";","export const getRatingDescription = (rating) => {\r\n\tif (rating < 1.5) {\r\n\t\treturn \"Poor\";\r\n\t} else if (rating < 2.5) {\r\n\t\treturn \"Bad\";\r\n\t} else if (rating < 3.5) {\r\n\t\treturn \"Average\";\r\n\t} else if (rating < 4.5) {\r\n\t\treturn \"Great\";\r\n\t}\r\n\treturn \"Excellent\";\r\n};","import React from \"react\";\r\nimport { Component } from \"reflux\";\r\n\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport {Button} from \"react-bootstrap\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\nimport {getRatingDescription} from \"../util/RatingUtil\";\r\nimport { FONT_FAMILY } from \"../constants/ThemeConstants\";\r\n\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\twidth: \"90%\",\r\n\t\toverflowX: \"hidden\"\r\n\t},\r\n\tslider: {\r\n        padding: '15px',\r\n\t},\r\n\t\r\n\theading: {\r\n\t\tfontSize: theme.typography.pxToRem(30),\r\n\t\tfontWeight: theme.typography.fontWeightRegular,\r\n\t\tfontFamily: FONT_FAMILY\r\n\t},\r\n});\r\n\r\n/**\r\n * This component handles rendering the components that allow rating sidewalks\r\n */\r\nclass SidewalkRatingsModal extends Component {\r\n\t\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t\tthis.state = {\r\n\t\t\taccessibilityValue: 3,\r\n\t\t\tconnectivityValue: 3,\r\n\t\t\tcomfortValue: 3,\r\n\t\t\tsafetyValue: 3,\r\n\t\t\tsecurityValue: 3\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Hendles change of user rating\r\n\t */\r\n\tchangeAccessibility = (event, accessibilityValue) => {\r\n\t\tthis.setState({ accessibilityValue });\r\n\t};\r\n\t\r\n\tChangeConnectivity = (event, connectivityValue) => {\r\n\t\tthis.setState({ connectivityValue });\r\n\t};\r\n\r\n\tchangeComfort = (event, comfortValue) => {\r\n\t\tthis.setState({ comfortValue });\r\n\t};\r\n\r\n\tchangeSafety = (event, safetyValue ) => {\r\n\t\tthis.setState({ safetyValue });\r\n\t};\r\n\r\n\tchangeSecurity = (event, securityValue) => {\r\n\t\tthis.setState({ securityValue });\r\n\t};\r\n\r\n\t/**\r\n\t * Handles changes when submit rating button is clicked\r\n\t */\r\n\t_handleSubmitRating = () => {\r\n\t\tActions.uploadRatings(\r\n\t\t\tthis.state.accessibilityValue,\r\n\t\t\tthis.state.comfortValue,\r\n\t\t\tthis.state.connectivityValue,\r\n\t\t\tthis.state.safetyValue,\r\n\t\t\tthis.state.securityValue,\r\n\t\t\t() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\taccessibilityValue: 3, \r\n\t\t\t\t\tconnectivityValue: 3,\r\n\t\t\t\t\tcomfortValue: 3,\r\n\t\t\t\t\tsafetyValue: 3,\r\n\t\t\t\t\tsecurityValue: 3\r\n\t\t\t\t});\r\n\t\t\t\tthis.props.onClose(true);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderSlider(classes, value, onChange, name) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h5>{name}</h5>\r\n\t\t\t\t<div className=\"ratingSlider\">\r\n\t\t\t\t\t<div className={classes.root}>\r\n\t\t\t\t\t\t<Slider\r\n\t\t\t\t\t\t\tclasses={{ container: classes.slider }}\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\tmax={5}\r\n\t\t\t\t\t\t\tstep={1}\r\n\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<span style={{paddingLeft: \"15px\"}}>\r\n\t\t\t\t\t\t{getRatingDescription(value)}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\r\n\trenderBody() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.renderSlider(classes, this.state.accessibilityValue, this.changeAccessibility, \"Accessibility\")}\r\n\t\t\t\t{this.renderSlider(classes, this.state.connectivityValue, this.ChangeConnectivity, \"Connectivity\")}\r\n\t\t\t\t{this.renderSlider(classes, this.state.comfortValue, this.changeComfort, \"Comfort\")}\r\n\t\t\t\t{this.renderSlider(classes, this.state.safetyValue, this.changeSafety, \"Physical Safety\")}\r\n\t\t\t\t{this.renderSlider(classes, this.state.securityValue, this.changeSecurity, \"Sense of Security\")}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.props.open}\r\n\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t>\r\n\t\t\t\t<div className={classes.paper}>\r\n\t\t\t\t\t<h4 className=\"modal-title\">Rate Sidewalk</h4>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t{this.state.isUploadingRatings && <LoaderComponent />}\r\n\t\t\t\t\t\t{this.renderBody()}\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={this.props.onClose}>\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button bsStyle=\"primary\" onClick={this._handleSubmitRating} disabled={this.state.isUploadingRatings}>\r\n\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</div>\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(SidewalkRatingsModal);","import React from \"react\";\r\nimport { Component } from \"reflux\";\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\nimport CommentsListComponent from \"./CommentsListComponent\";\r\nimport SidewalkImageDetailsComponent from \"./images/SidewalkImageDetailsComponent\";\r\nimport PedestrianDataComponent from \"./PedestrianDataComponent\";\r\nimport SidewalkRatingsModal from \"./SidewalkRatingsModal\";\r\nimport {getRatingDescription} from \"../util/RatingUtil\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { FONT_FAMILY } from \"../constants/ThemeConstants\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\twidth: '90%',\r\n\t},\r\n\t\r\n\theading: {\r\n\t\tfontSize: theme.typography.pxToRem(30),\r\n\t\tfontWeight: theme.typography.fontWeightRegular,\r\n\t\tfontFamily: FONT_FAMILY\r\n\t},\r\n});\r\n\r\n/**\r\n * This component handles rendering details about a selected sidewalk\r\n */\r\nclass SidewalkDetailsView extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tratingsModalOpen: false\r\n\t\t};\r\n\t\tthis.store = Store;\r\n\t\tthis.selfRef = React.createRef();\r\n\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif (this.props.visible && !prevProps.visible && this.props.selectedSidewalkDetails) {\r\n\t\t\tActions.loadSidewalkDetails(this.props.selectedSidewalkDetails);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * handles closing of the drawer\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tthis.props.onClose();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles a key being pressed\r\n\t * @param {Object} event - the event representing the key press\r\n\t */\r\n\t_handleKeyDown = (event) => {\r\n\t\tif (event.key === \"Escape\") {\r\n\t\t\tthis._handleClose();\r\n\t\t}\r\n\t};\r\n\r\n\r\n\trenderExpansionPanel(header, component, expanded = false) {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<ExpansionPanel defaultExpanded={expanded}>\r\n\t\t\t\t<ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} data-sidewalk-header={header}>\r\n\t\t\t\t\t<Typography className={classes.heading}>{header}</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails>\r\n\t\t\t\t\t{component}\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles rendering summary details about this sidewalk\r\n\t */\r\n\trenderSummaryDetails() {\r\n\t\tlet imageSection = null;\r\n\t\tif (this.state.currentSidewalk.lastImage) {\r\n\t\t\timageSection = (\r\n\t\t\t\t<div className=\"drawerImageSection\">\r\n\t\t\t\t\t<img className=\"img-responsive\" alt=\"sidewalk-preview\" src={this.state.currentSidewalk.lastImage.url} />\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\timageSection = <h4>There are no uploaded images for this sidewalk.</h4>;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3 className=\"streetNameSection\">\r\n\t\t\t\t\t{this.state.currentSidewalk.address}\r\n\t\t\t\t</h3>\r\n\t\t\t\t<hr />\r\n\t\t\t\t{imageSection}\r\n\t\t\t\t<hr />\r\n\t\t\t\t<h5>\r\n\t\t\t\t\tThe average pedestrian velocity on this sidewalk is {this.state.currentSidewalk.averageVelocity} metres per second.\r\n\t\t\t\t</h5>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\trenderUploadImageComponent() {\r\n\t\treturn <SidewalkImageDetailsComponent onOpenImages={this.props.onOpenImages} />;\r\n\t}\r\n\r\n\t_formatRating(value) {\r\n\t\treturn value ? getRatingDescription(value) : \"-\";\r\n\t}\r\n\r\n\t_openRatingsModal = () => {\r\n\t\tthis.setState({ ratingsModalOpen: true });\r\n\t};\r\n\r\n\t/**\r\n\t * Closes the ratings modal\r\n\t * @param {boolean} postedRating - whether the user posted a rating to the sidewalk successfully or not\r\n\t */\r\n\t_closeRatingsModal = (postedRating) => {\r\n\t\tif (postedRating) {\r\n\t\t\tActions.getSidewalkRatings(() => {this.props.updateRatings(this.state.currentSidewalk);});\r\n\t\t}\r\n\t\tthis.setState({ ratingsModalOpen: false });\r\n\t};\r\n\t\r\n\trenderRatingsAmount = () => {\r\n\t\tif (this.state.currentSidewalk.totalRatings === 1) {\r\n\t\t\treturn <h4>1 person has rated this sidewalk.</h4>\r\n\t\t}\r\n\t\treturn <h4>{this.state.currentSidewalk.totalRatings} people have rated this sidewalk.</h4>\r\n\t}\r\n\t\r\n\t/**\r\n\t * handles rendering the ratings on the drawer\r\n\t */\r\n\trenderRatings() {\r\n\t\treturn (\r\n\t\t\t<div >\r\n\t\t\t\t<Button bsStyle=\"primary\" onClick={this._openRatingsModal}>Rate this sidewalk</Button>\r\n\t\t\t\t<SidewalkRatingsModal open={this.state.ratingsModalOpen} onClose={this._closeRatingsModal} />\r\n\t\t\t\t{this.renderRatingsAmount()}\r\n\t\t\t\t<hr />\r\n\t\t\t\t<h4>Overall: {this._formatRating(this.state.currentSidewalk.overallRating)}</h4>\r\n\t\t\t\t<h4>Accessibility: {this._formatRating(this.state.currentSidewalk.accessibility)}</h4>\r\n\t\t\t\t<h4>Connectivity: {this._formatRating(this.state.currentSidewalk.connectivity)}</h4>\r\n\t\t\t\t<h4>Comfort: {this._formatRating(this.state.currentSidewalk.comfort)}</h4>\r\n\t\t\t\t<h4>Physical Safety: {this._formatRating(this.state.currentSidewalk.physicalSafety)}</h4>\r\n\t\t\t\t<h4>Sense of Security: {this._formatRating(this.state.currentSidewalk.senseOfSecurity)}</h4>\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n\r\n\trenderComments() {\r\n\t\treturn <CommentsListComponent />;\r\n\t}\r\n\r\n\r\n\trenderPedestrianData() {\r\n\t\tif (this.state.currentSidewalk.mobilityTypeDistribution.length === 0) {\r\n\t\t\treturn <h4>No pedestrian data has been recorded for this sidewalk</h4>;\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<PedestrianDataComponent activities={this.state.currentSidewalk.mobilityTypeDistribution} />\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * handles rendering the components on the drawer\r\n\t */\r\n\trenderDrawerDetails() {\r\n\t\tif (!this.state.currentSidewalk) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"sidewalkDrawer\">\r\n\t\t\t\t{this.renderExpansionPanel(\"Summary\", this.renderSummaryDetails(), true)}\r\n\t\t\t\t{this.renderExpansionPanel(\"Images\", this.renderUploadImageComponent())}\r\n\t\t\t\t{this.renderExpansionPanel(\"Ratings\", this.renderRatings())}\r\n\t\t\t\t{this.renderExpansionPanel(\"Comments\", this.renderComments())}\r\n\t\t\t\t{this.renderExpansionPanel(\"Pedestrian Data\", this.renderPedestrianData())}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div tabIndex={0} onKeyDown={this._handleKeyDown} ref={this.selfRef} className=\"noOutlineDiv\">\r\n\t\t\t\t<Drawer open={this.props.visible}\r\n\t\t\t\t\t\tanchor=\"right\"\r\n\t\t\t\t\t\tvariant=\"temporary\"\r\n\t\t\t\t\t\tModalProps={{ onBackdropClick: this._handleClose }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t<CloseIcon onClick={this._handleClose} className=\"closeButton\" />\r\n\t\t\t\t\t{this.renderDrawerDetails()}\r\n\t\t\t\t</Drawer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default withStyles(styles)(SidewalkDetailsView);","import React from \"react\";\r\nimport InfiniteLoader from \"react-virtualized/dist/commonjs/InfiniteLoader\";\r\nimport List from \"react-virtualized/dist/commonjs/List\";\r\n\r\nexport default class InfiniteLoadingList extends React.PureComponent {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.listRef = React.createRef();\r\n\t}\r\n\t\r\n\tcomponentWillReceiveProps(){\r\n\t\tthis.listRef.current.forceUpdateGrid();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst loadedCount = (this.props.hasNextPage && !this.props.isNextPageLoading) ? this.props.loadedItemCount + 1 : this.props.loadedItemCount;\r\n\t\treturn (\r\n\t\t\t<InfiniteLoader\r\n\t\t\t  isRowLoaded={this.props.isRowLoaded}\r\n\t\t\t  loadMoreRows={this.props.loadMoreRows}\r\n\t\t\t  rowCount={loadedCount}>\r\n\t\t\t  {({onRowsRendered}) => (\r\n\t\t\t\t\t<List\r\n\t\t\t\t\t  ref={this.listRef}\r\n\t\t\t\t\t  height={1000}\r\n\t\t\t\t\t  onRowsRendered={onRowsRendered}\r\n\t\t\t\t\t  rowCount={loadedCount}\r\n\t\t\t\t\t  rowHeight={this.props.height || 200}\r\n\t\t\t\t\t  rowRenderer={this.props.rowRenderer}\r\n\t\t\t\t\t  width={this.props.width || 250}\r\n\t\t\t\t\t  style={{outline: \"none\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t  )}\r\n\t\t\t</InfiniteLoader>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\nimport ImageDisplayList from \"../misc-components/InfiniteLoadingList\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\n/**\r\n * This component handles the view where the user can see all of the images posted to a sidewalk\r\n */\r\nexport default class InfiniteImageGallery extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrentImageIndex: 0\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Handles an image being clicked\r\n\t * @param {number} index - the index of the image that was just clicked\r\n\t */\r\n\t_onImageClicked = (index) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentImageIndex: index\r\n\t\t});\r\n\t\tif(this.props.getImageIndex !== undefined){\r\n\t\t\tthis.props.getImageIndex(index);\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets whether the specified item is loaded\r\n\t * @param {number} index - the index of the item in the list of all loaded items\r\n\t * @return {boolean} - whether the specified item is loaded\r\n\t */\r\n\t_isRowLoaded = ({index}) => {\r\n\t\treturn Boolean(this.props.loadedImages[index]);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Loads more items\r\n\t * @param {number} startIndex - the starting index of new items to load\r\n\t * @param {number} stopIndex - the ending index of new items to load\r\n\t */\r\n\t_loadMoreRows = ({startIndex, stopIndex}) => {\r\n\t\t// TODO: remove this if statement if using drawer\r\n\t\tif (!startIndex) {\r\n\t\t\tstartIndex = this.props.loadedImages.length;\r\n\t\t\tstopIndex = startIndex + 1;\r\n\t\t}\r\n\t\tthis.props.loadMoreData(startIndex, stopIndex + 4);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Renders the specified item\r\n\t * @param {number} index - the index of the item in the list of loaded items\r\n\t * @param {*} key - the unique key of this item\r\n\t * @param {Object} style - the object's div style to render\r\n\t * @return {JSX} - the item to render\r\n\t */\r\n\t_rowRenderer = ({index, key, style}) => {\r\n\t\tlet content;\r\n\t\tif (this._isRowLoaded({index})) {\r\n\t\t\tcontent = (\r\n\t\t\t\t<div className={this.state.currentImageIndex === index ? \"infiniteImageRowSelected\" : \"infiniteImageRowUnselected\"}>\r\n\t\t\t\t\t<Card className=\"clickableItem\">\r\n\t\t\t\t\t\t{this.props.renderAboveImage && this.props.renderAboveImage(this.state.currentImageIndex === index, this.props.loadedImages[index])}\r\n\t\t\t\t\t\t<img onClick={() => {this._onImageClicked(index)}} className=\"img-responsive fillAvailable\" alt=\"uploaded\" src={this.props.loadedImages[index].url} />\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tcontent = <LoaderComponent />;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"infiniteImageListRow\" key={key} style={style}>\r\n\t\t\t\t{content}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles a key being pressed\r\n\t * @param {Object} event - the event representing the key press\r\n\t */\r\n\t_handleKeyDown = (event) => {\r\n\t\tif (!this.props.visible) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (event.key === \"ArrowRight\" || event.key === \"ArrowDown\") {\r\n\t\t\tif (this.state.currentImageIndex === this.props.loadedImages.length - 1) {\r\n\t\t\t\tif (!this.props.hasNextPage) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._loadMoreRows({\r\n\t\t\t\t\tstartIndex: this.state.currentImageIndex + 1,\r\n\t\t\t\t\tstopIndex: this.state.currentImageIndex + 1\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentImageIndex: this.state.currentImageIndex + 1\r\n\t\t\t});\r\n\t\t} else if ((event.key === \"ArrowLeft\" || event.key === \"ArrowUp\") && this.state.currentImageIndex > 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentImageIndex: this.state.currentImageIndex - 1\r\n\t\t\t});\r\n\t\t} else if (event.key === \"Escape\") {\r\n\t\t\tthis.props.onClose();\r\n\t\t}\r\n\t};\r\n\t\r\n\trenderSelectedImage() {\r\n\t\tlet content;\r\n\t\tif (this.props.loadedImages[this.state.currentImageIndex]) {\r\n\t\t\tcontent = (\r\n\t\t\t\t<img className=\"backgroundImage\"\r\n\t\t\t\t\talt=\"selected\"\r\n\t\t\t\t\tsrc={this.props.loadedImages[this.state.currentImageIndex].url} />\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tcontent = <LoaderComponent />;\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"selectedImageWrapper\">\r\n\t\t\t\t{content}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tdisplayImageDrawer() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<Drawer open={this.props.visible}\r\n\t\t\t\t\tvariant=\"persistent\"\r\n\t\t\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t\t\t\tanchor=\"left\"\r\n\t\t\t\t\t\tSlideProps={{\r\n\t\t\t\t\t\t\tunmountOnExit: true\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t{this.renderSelectedImage()}\r\n\t\t\t\t</Drawer>\r\n\t\t\t\t<Drawer open={this.props.visible}\r\n\t\t\t\t\t\tvariant=\"persistent\"\r\n\t\t\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t\t\t\tanchor=\"right\"\r\n\t\t\t\t\t\tSlideProps={{\r\n\t\t\t\t\t\t\tunmountOnExit: true\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<CloseIcon className=\"closeButton\" onClick={this.props.onClose} />\r\n\t\t\t\t\t<ImageDisplayList isRowLoaded={this._isRowLoaded}\r\n\t\t\t\t\t\tloadMoreRows={this.props.isNextPageLoading ? () => {} : this._loadMoreRows}\r\n\t\t\t\t\t\trowRenderer={this._rowRenderer}\r\n\t\t\t\t\t\thasNextPage={this.props.hasNextPage}\r\n\t\t\t\t\t\tloadedItemCount={this.props.loadedImages.length}\r\n\t\t\t\t\t\tisNextPageLoading={this.props.isNextPageLoading}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Drawer>\r\n\t\t\t</div> \r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"noOutlineDiv\" tabIndex={0} onKeyDown={this._handleKeyDown}>\r\n\t\t\t\t{this.displayImageDrawer()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport LoaderComponent from \"../../misc-components/LoaderComponent\";\r\nimport ConfirmationModal from \"../../misc-components/ConfirmationModal\";\r\n\r\nimport Store from \"../../admin/AdminStore\";\r\nimport Actions from \"../../admin/AdminActions\";\r\n\r\n/**\r\n * This component renders a modal that allows an administrator to delete a user's image on a sidewalk\r\n */\r\nexport default class ImageDeletionModal extends Reflux.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.store = Store;\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the user closing the modal\r\n\t */\r\n\t_cancel = () => {\r\n\t\tthis.props.onClose();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user selecting the confirm button\r\n\t */\r\n\t_confirm = () => {\r\n\t\tActions.deleteImage(this.props.sidewalkId, this.props.image.id, (success) => {\r\n\t\t\tif (success) {\r\n\t\t\t\tthis.props.onClose(true);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\t\r\n\trenderModalBody() {\r\n\t\tif (!this.props.visible) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.isDeletingImage && <LoaderComponent />\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"selectedImagePreview\">\r\n\t\t\t\t\t<img className=\"img-responsive\"\r\n\t\t\t\t\t\talt=\"selected\"\r\n\t\t\t\t\t\tsrc={this.props.image.url} />\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ConfirmationModal title=\"Are you sure you want to delete this image?\"\r\n\t\t\t\t\t\t\t   body={this.renderModalBody()}\r\n\t\t\t\t\t\t\t   onCancel={this._cancel}\r\n\t\t\t\t\t\t\t   onConfirm={this._confirm}\r\n\t\t\t\t\t\t\t   visible={this.props.visible}\r\n\t\t\t\t\t\t\t   disabledConfirm={this.state.isDeletingImage}\r\n\t\t    />\r\n\t\t)\r\n\t}\r\n\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport InfiniteImageGallery from \"../../images/InfiniteImageGallery\";\r\nimport SidewalkStore from \"../SidewalkStore\";\r\nimport SidewalkActions from \"../SidewalkActions\";\r\nimport AdminStore from \"../../admin/AdminStore\";\r\nimport ImageDeletionModal from \"./ImageDeletionModal\";\r\n\r\n/**\r\n * This component handles the view where the user can see all of the images posted to a sidewalk\r\n */\r\nexport default class SidewalkUploadedImagesGallery extends Reflux.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.stores = [SidewalkStore, AdminStore];\r\n\t\tthis.state = {\r\n\t\t\tisNextPageLoading: false,\r\n\t\t\tmodalOpened: false\r\n\t\t};\r\n\t\tthis.galleryRef = React.createRef();\r\n\t}\r\n\r\n\t/**\r\n\t * Loads more images to display\r\n\t * @param {number} startIndex - the starting index of new items to load\r\n\t * @param {number} stopIndex - the ending index of new items to load\r\n\t */\r\n\t_loadMoreImages = (startIndex, stopIndex) => {\r\n\t\tthis.setState({\r\n\t\t\tisNextPageLoading: true\r\n\t\t});\r\n\t\tSidewalkActions.loadUploadedImages(startIndex, stopIndex, () => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisNextPageLoading: false\r\n\t\t\t\t});\r\n\t\t\t}, 50);\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the delete image button being clicked\r\n\t */\r\n\t_onDeleteImageClicked = (image) => {\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: true,\r\n\t\t\tselectedImage: image\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the modal asking the user to confirm their deletion attempt being closed\r\n\t * @param {boolean} deleted - whether the image was successfully deleted or not\r\n\t */\r\n\t_onModalClosed = (deleted) => {\r\n\t\tif (deleted) {\r\n\t\t\tSidewalkActions.removeLoadedImage(this.state.selectedImage, (index) => {\r\n\t\t\t\tthis.galleryRef.current._onImageClicked(index - 1);\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.props.onClose();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tmodalOpened: false,\r\n\t\t\tselectedImage: null\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Renders the button allowing the user to delete the currently selected image\r\n\t * @param {boolean} selected - whether the image to render the button over is selected or not\r\n\t * @param {Object} image - details about the image object\r\n\t * @return - null if the image is not selected, or the close button if the image is selected\r\n\t */\r\n\t_renderDeleteButton = (selected, image) => {\r\n\t\tif (!selected || !this.state.isLoggedIn) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\treturn <CloseIcon className=\"closeButton\" onClick={() => {this._onDeleteImageClicked(image)}} />\r\n\t};\r\n\t\r\n\trender() {\r\n\t\tif (!this.state.currentSidewalk) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<InfiniteImageGallery\r\n\t\t\t\t\tloadedImages={this.state.loadedUserImages}\r\n\t\t\t\t\thasNextPage={this.state.hasNextImagesPage}\r\n\t\t\t\t\tloadMoreData={this._loadMoreImages}\r\n\t\t\t\t\tvisible={this.props.visible}\r\n\t\t\t\t\tisNextPageLoading={this.state.isNextPageLoading}\r\n\t\t\t\t\tonClose={this.props.onClose}\r\n\t\t\t\t\trenderAboveImage={this._renderDeleteButton}\r\n\t\t\t\t\tref={this.galleryRef}\r\n\t\t\t\t/>\r\n\t\t\t\t<ImageDeletionModal visible={this.props.visible && this.state.modalOpened}\r\n\t\t\t\t\t\t\t\t\tonClose={this._onModalClosed}\r\n\t\t\t\t\t\t\t\t\tsidewalkId={this.state.currentSidewalk.id}\r\n\t\t\t\t\t\t\t\t\timage={this.state.selectedImage} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\n\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n/**\r\n * This component renders a temporary message to the user that will disappear after a few seconds\r\n */\r\nexport default class BaseAlertComponent extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tthis.props.onClose();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Snackbar\r\n\t\t\t  anchorOrigin={{\r\n\t\t\t\tvertical: \"bottom\",\r\n\t\t\t\thorizontal: \"left\",\r\n\t\t\t  }}\r\n\t\t\t  open={this.props.visible}\r\n\t\t\t  autoHideDuration={4000}\r\n\t\t\t  onClose={this._handleClose}\r\n\t\t\t>\r\n\t\t\t\t<SnackbarContent\r\n\t\t\t\t  className={this.props.alertContentClassName}\r\n\t\t\t\t  aria-describedby=\"client-snackbar\"\r\n\t\t\t\t  message={\r\n\t\t\t\t\t<div id=\"client-snackbar\" className=\"alertBody\">\r\n\t\t\t\t\t\t{this.props.icon}\r\n\t\t\t\t\t  <span className=\"alertMessage\">\r\n\t\t\t\t\t\t  {this.props.message}\r\n\t\t\t\t\t  </span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t  }\r\n\t\t\t\t  action={[\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t  key=\"close\"\r\n\t\t\t\t\t  aria-label=\"Close\"\r\n\t\t\t\t\t  color=\"inherit\"\r\n\t\t\t\t\t  onClick={this._handleClose}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t  <CloseIcon />\r\n\t\t\t\t\t</IconButton>,\r\n\t\t\t\t  ]}\r\n\t\t\t\t/>\r\n\t\t\t</Snackbar>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\n\r\nimport BaseAlertComponent from \"./BaseAlertComponent\";\r\n\r\n/**\r\n * This component renders an error message to the user that will disappear after a few seconds\r\n */\r\nexport default class ErrorAlertComponent extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<BaseAlertComponent onClose={this.props.onClose}\r\n\t\t\t\t\t\t\t\tvisible={this.props.visible}\r\n\t\t\t\t\t\t\t\tmessage={this.props.message}\r\n\t\t\t\t\t\t\t\talertContentClassName=\"errorAlert\"\r\n\t\t\t\t\t\t\t\ticon={<ErrorIcon className=\"alertIcon\" />}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../SidewalkStore\";\r\nimport Actions from \"../SidewalkActions\";\r\nimport ErrorAlertComponent from \"../../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when an image upload fails\r\n */\r\nexport default class UploadedImageErrorComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissImageErrorMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ErrorAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.uploadedImageError}\r\n\t\t\t\t\t\t\t\t message=\"An error occurred while uploading the image.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\n\r\nimport BaseAlertComponent from \"./BaseAlertComponent\";\r\n\r\n/**\r\n * This component renders a successful action message to the user that will disappear after a few seconds\r\n */\r\nexport default class SuccessAlertComponent extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<BaseAlertComponent onClose={this.props.onClose}\r\n\t\t\t\t\t\t\t\tvisible={this.props.visible}\r\n\t\t\t\t\t\t\t\tmessage={this.props.message}\r\n\t\t\t\t\t\t\t\talertContentClassName=\"successAlert\"\r\n\t\t\t\t\t\t\t\ticon={<CheckCircleIcon className=\"alertIcon\" />}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../SidewalkStore\";\r\nimport Actions from \"../SidewalkActions\";\r\nimport SuccessAlertComponent from \"../../misc-components/SuccessAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when an image upload succeeds\r\n */\r\nexport default class UploadedImageSuccessComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissImageSuccessMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<SuccessAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.uploadImageSucceeded}\r\n\t\t\t\t\t\t\t\t message=\"Your image was uploaded. It must be approved before it is visible.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../admin/AdminStore\";\r\nimport Actions from \"../admin/AdminActions\";\r\nimport SuccessAlertComponent from \"../misc-components/SuccessAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when a comment delete attempt succeeds\r\n */\r\nexport default class CommentDeleteSuccessComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissCommentSuccessMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<SuccessAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.successfullyDeletedComment}\r\n\t\t\t\t\t\t\t\t message=\"The comment was successfully deleted.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../admin/AdminStore\";\r\nimport Actions from \"../admin/AdminActions\";\r\nimport ErrorAlertComponent from \"../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when a comment delete attempt fails\r\n */\r\nexport default class CommentDeleteErrorComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissCommentErrorMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ErrorAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.failedDeleteComment}\r\n\t\t\t\t\t\t\t\t message=\"An error occurred while deleting the comment.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../../admin/AdminStore\";\r\nimport Actions from \"../../admin/AdminActions\";\r\nimport ErrorAlertComponent from \"../../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when an image deletion fails\r\n */\r\nexport default class ImageDeleteErrorComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissImageErrorMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ErrorAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.failedDeleteImage}\r\n\t\t\t\t\t\t\t\t message=\"An error occurred while deleting the image.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"../../admin/AdminStore\";\r\nimport Actions from \"../../admin/AdminActions\";\r\nimport SuccessAlertComponent from \"../../misc-components/SuccessAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when an image deletion succeeds\r\n */\r\nexport default class ImageDeleteSuccessComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissImageSuccessMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<SuccessAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.successfullyDeletedImage}\r\n\t\t\t\t\t\t\t\t message=\"The image has been successfully deleted.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\nimport SuccessAlertComponent from \"../misc-components/SuccessAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when a comment post attempt succeeds\r\n */\r\nexport default class CommentPostSuccessComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissCommentSuccessMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<SuccessAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.uploadCommentSucceeded}\r\n\t\t\t\t\t\t\t\t message=\"Your comment was successfully posted.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\nimport ErrorAlertComponent from \"../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when a comment post attempt fails\r\n */\r\nexport default class CommentPostErrorComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissCommentErrorMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ErrorAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.uploadCommentFailed}\r\n\t\t\t\t\t\t\t\t message=\"An error occurred while posting the comment.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\nimport SuccessAlertComponent from \"../misc-components/SuccessAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when a rating post attempt succeeds\r\n */\r\nexport default class PostRatingSuccessComonent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissRatingsSuccessMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<SuccessAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.successfullyUploadedRatings}\r\n\t\t\t\t\t\t\t\t message=\"Your rating was successfully posted.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Store from \"./SidewalkStore\";\r\nimport Actions from \"./SidewalkActions\";\r\nimport ErrorAlertComponent from \"../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the error message that is displayed when a rating post attempt fails\r\n */\r\nexport default class PostRatingErrorComponent extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n\t\tActions.dismissRatingsFailureMessage();\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ErrorAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.failedUploadingRatings}\r\n\t\t\t\t\t\t\t\t message=\"An error occurred while posting the rating.\"\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nimport UploadedImageErrorComponent from \"../sidewalk/images/UploadedImageErrorComponent\";\r\nimport UploadedImageSuccessComponent from \"../sidewalk/images/UploadedImageSuccessComponent\";\r\nimport CommentDeleteSuccessComponent from \"../sidewalk/CommentDeleteSuccessComponent\";\r\nimport CommentDeleteErrorComponent from \"../sidewalk/CommentDeleteErrorComponent\";\r\nimport ImageDeleteErrorComponent from \"../sidewalk/images/ImageDeleteErrorComponent\";\r\nimport ImageDeleteSuccessComponent from \"../sidewalk/images/ImageDeleteSuccessComponent\";\r\nimport CommentPostSuccessComponent from \"../sidewalk/CommentPostSuccessComponent\";\r\nimport CommentPostErrorComponent from \"../sidewalk/CommentPostErrorComponent\";\r\nimport PostRatingSuccessComponent from \"../sidewalk/PostRatingSuccessComponent\";\r\nimport PostRatingErrorComponent from \"../sidewalk/PostRatingErrorComponent\";\r\n\r\n/**\r\n * Renders any alerts that the user may see\r\n */\r\nexport default class AlertsContainer extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<UploadedImageErrorComponent />\r\n\t\t\t\t<UploadedImageSuccessComponent />\r\n\t\t\t\t<CommentDeleteSuccessComponent />\r\n\t\t\t\t<CommentDeleteErrorComponent />\r\n\t\t\t\t<ImageDeleteErrorComponent />\r\n\t\t\t\t<ImageDeleteSuccessComponent />\r\n\t\t\t\t<CommentPostErrorComponent />\r\n\t\t\t\t<CommentPostSuccessComponent />\r\n\t\t\t\t<PostRatingSuccessComponent />\r\n\t\t\t\t<PostRatingErrorComponent />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}","import React from \"react\";\r\nimport { Component } from 'reflux';\r\n\r\nimport SummaryMapView from \"./SummaryMapView\";\r\nimport SidewalkDetailsView from \"../sidewalk/SidewalkDetailsView\";\r\nimport SidewalkUploadedImagesGallery from \"../sidewalk/images/SidewalkUploadedImagesGallery\";\r\nimport AlertsContainer from \"./AlertsContainer\";\r\n\r\nimport MapStore from \"./MapStore\";\r\nimport MapActions from \"./MapActions\";\r\n\r\nexport default class MapDashboard extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tviewingImages: false\r\n\t\t};\r\n\t\tthis.store = MapStore;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!this.state.sidewalks || this.state.sidewalks.length === 0) {\r\n\t\t\tMapActions.loadAllSidewalks();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens up the uploaded images view\r\n\t */\r\n\t_viewImages = () => {\r\n\t\tMapActions.setDrawerOpened(false);\r\n\t\tthis.setState({\r\n\t\t\tviewingImages: true\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Closes the uploaded images view\r\n\t * @param {boolean} reopenDrawer - whether the drawer should be reopened or not\r\n\t */\r\n\t_closeImages = (reopenDrawer = true) => {\r\n\t\tif (reopenDrawer) {\r\n\t\t\tMapActions.setDrawerOpened(true);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tviewingImages: false\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Updates the ratings of the currently selected sidewalk in the list of all sidewalks\r\n\t * @param {Object} sidewalk - details about the sidewalk\r\n\t */\r\n\t_updateRatings = (sidewalk) => {\r\n\t\tMapActions.updateSidewalkRatings(sidewalk);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles the user closing the drawer\r\n\t */\r\n\t_onCloseDrawer = () => {\r\n\t\tthis._closeImages(false);\r\n\t\tMapActions.setDrawerOpened(false);\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<SummaryMapView />\r\n\t\t\t\t<SidewalkDetailsView\r\n\t\t\t\t\tvisible={this.state.sidewalkSelected}\r\n\t\t\t\t\tonClose={this._onCloseDrawer}\r\n\t\t\t\t\tselectedSidewalkDetails={this.state.selectedSidewalkDetails}\r\n\t\t\t\t\tonOpenImages={this._viewImages}\r\n\t\t\t\t\tupdateRatings={this._updateRatings}\r\n\t\t\t\t/>\r\n\t\t\t\t<SidewalkUploadedImagesGallery onClose={this._closeImages} visible={this.state.viewingImages} />\r\n\t\t\t\t<AlertsContainer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}","import React from \"react\";\r\n\r\n/**\r\n * This component renders the page that details what the site is about\r\n */\r\nexport default class AboutPageView extends React.Component {\r\n\r\n\t/**\r\n\t * Renders a topic in the about page\r\n\t * @param {String} title - the title of the topic\r\n\t * @param {String} content - the content describing the topic\r\n\t */\r\n\trenderCategory(title, content) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{title}</h3>\r\n\t\t\t\t<p>{content}</p>\r\n\t\t\t\t<hr />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"padding25\">\r\n\t\t\t\t{this.renderCategory(\"What is this website about?\", \r\n\t\t\t\t\t`This website was made for the purpose of allowing the citizens of Edmonton to discuss \r\n\t\t\t\t\ttheir experiences on sidewalks across the city with other people. As a user of this site, you are able to select any\r\n\t\t\t\t\tsidewalk in the city from the map displayed on the home page. By selecting a sidewalk, you will be\r\n\t\t\t\t\tshown what other people think about that particular sidewalk, through ratings, images, and comments.\r\n\t\t\t\t\tYou can leave your own ratings and comments on the sidewalk, as well as upload any image that you\r\n\t\t\t\t\tfeel is relevant to the sidewalk.`)}\r\n\t\t\t\t{this.renderCategory(\"Who will use the results?\", `\r\n\t\t\t\tThe results will primarily be used by two parties. The first one is government officials, so they can see\r\n\t\t\t\twhat sidewalks in the city are in need of improvement the most. STEPS researchers will also use the data collected\r\n\t\t\t\tfrom this website so that they can analyze it to get a bigger picture of the overall state of sidewalks\r\n\t\t\t\tin Edmonton.\r\n\t\t\t\t`)}\r\n\t\t\t\t{this.renderCategory(\"How can I get involved?\", `\r\n\t\t\t\tAll you need to do to be involved with the STEPS application is to leave your feelings and thoughts\r\n\t\t\t\tabout particular sidewalks. You can rate any sidewalk you want, comment on it, or even upload an image to it.\r\n\t\t\t\t`)}\r\n\t\t\t\t{this.renderCategory(\"Privacy Policy\", `\r\n\t\t\t\tAll of the data collected on this site will be used purely for research purposes. We will never sell any of the\r\n\t\t\t\tdata we collect to third parties, and nothing that you upload to the site will be directly linked back to you.\r\n\t\t\t\tAll of your interactions with the site will be anonymous.\r\n\t\t\t\t`)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport MasonryInfiniteScroller from \"react-masonry-infinite\";\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport AdminStore from \"./AdminStore\";\r\nimport AdminActions from \"./AdminActions\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\n\r\nimport SuccessAlertComponent from \"../misc-components/SuccessAlertComponent\";\r\nimport ErrorAlertComponent from \"../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the gallery of all uploaded images that have yet to be approved or rejected\r\n */\r\nexport default class AdminDrawerImageGallery extends Reflux.Component {\r\n\t\r\n    constructor(props) {\r\n        super(props);\r\n        this.store = AdminStore;\r\n        this.state = {\r\n\t\t\tcurrentImageIndex: 0\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n\t\tif (!this.state.isLoggedIn) {\r\n\t\t\tthis.props.history.push('/login');\r\n\t\t} else {\r\n\t\t\tAdminActions.getUnapprovedImages(0, 5);\r\n\t\t}\r\n    }\r\n    \r\n\t_dismissNotifications = () => {\r\n\t\tAdminActions.dismissImageApprovalNotification();\r\n\t\tAdminActions.dismissImageRejectionNotification();\r\n\t};\r\n\t\r\n\tloadMoreImages = () => {\r\n\t\tthis.setState({\r\n\t\t\tisNextPageLoading: true\r\n\t\t});\r\n        AdminActions.getUnapprovedImages(this.state.pendingImages.length, this.state.pendingImages.length + 10, () => {\r\n            setTimeout(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisNextPageLoading: false\r\n\t\t\t\t});\r\n\t\t\t}, 500);\r\n        });\r\n    };\r\n\r\n\t/**\r\n\t * Handles the user approving an image\r\n\t * @param {Object} image - the image to approve\r\n\t */\r\n    _onAcceptImage = (image) => {\r\n        AdminActions.handlePendingImages(true, image.id);\r\n    }\r\n\r\n\t/**\r\n\t * Handles the user rejecting an image\r\n\t * @param {Object} image - the image to reject\r\n\t */\r\n    _onRejectImage = (image) => {\r\n        AdminActions.handlePendingImages(false, image.id);\r\n    }\r\n\r\n\t/**\r\n\t * Renders the approve and reject buttons for the selected image\r\n\t * @param {boolean} selected - whether the image to render the button over is selected or not\r\n\t * @param {Object} image - details about the image object\r\n\t * @return - null if the image is not selected, or the buttons if the image is selected\r\n\t */\r\n\t_renderResponseButtons = (selected, image) => {\r\n\t\tif (!selected || !this.state.isLoggedIn) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<CloseIcon className=\"closeButton\" onClick={() => {this._onRejectImage(image)}} />\r\n\t\t\t\t<CheckCircleIcon className=\"acceptButton\" onClick={() => {this._onAcceptImage(image)}} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handles an image being clicked\r\n\t * @param {number} index - the index of the image that was just clicked\r\n\t */\r\n\t_onImageClicked = (index) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentImageIndex: index\r\n\t\t});\r\n\t};\r\n\t\r\n\t/**\r\n\t * Gets whether the specified item is loaded\r\n\t * @param {number} index - the index of the item in the list of all loaded items\r\n\t * @return {boolean} - whether the specified item is loaded\r\n\t */\r\n\t_isRowLoaded = (index) => {\r\n\t\treturn Boolean(this.state.pendingImages[index]);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Renders the specified item\r\n\t * @param {number} index - the index of the item in the list of loaded items\r\n\t * @param {*} key - the unique key of this item\r\n\t * @param {Object} style - the object's div style to render\r\n\t * @return {JSX} - the item to render\r\n\t */\r\n\t_rowRenderer = ({index, key, style}) => {\r\n\t\tlet content;\r\n\t\tif (this._isRowLoaded(index)) {\r\n\t\t\tcontent = (\r\n\t\t\t\t<div className={this.state.currentImageIndex === index ? \"infiniteImageRowSelected\" : \"infiniteImageRowUnselected\"}>\r\n\t\t\t\t\t<Card className=\"clickableItem\">\r\n\t\t\t\t\t\t{this.props.renderAboveImage && this.props.renderAboveImage(this.state.currentImageIndex === index, this.state.pendingImages[index])}\r\n\t\t\t\t\t\t<img onClick={() => {this._onImageClicked(index)}} className=\"img-responsive fillAvailable\" alt=\"uploaded\" src={this.state.pendingImages[index].url} />\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tcontent = <LoaderComponent />;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div key={key} style={style}>\r\n\t\t\t\t{content}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\t\r\n\trenderSelectedImage() {\r\n\t\tif (this.state.pendingImages[this.state.currentImageIndex]) {\r\n\t\t\treturn (\r\n\t\t\t\t<img className=\"backgroundImage\"\r\n\t\t\t\t\talt=\"selected\"\r\n\t\t\t\t\tsrc={this.state.pendingImages[this.state.currentImageIndex].url} />\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <LoaderComponent />;\r\n\t}\r\n\t\r\n\trender() {\r\n        if (!this.state.pendingImages) {\r\n\t\t\treturn <h1>No images uploaded</h1>;\r\n\t\t}\r\n\t\t\r\n\t\t// TODO: use react image gallery with html observer event to load more\r\n\t\treturn (   \r\n\t\t\t<div>\r\n\t\t\t\t{this.renderSelectedImage()}\r\n\t\t\t\t<MasonryInfiniteScroller\r\n\t\t\t\t\thasMore={this.state.hasMoreImages}\r\n\t\t\t\t\tloadMore={this.state.isNextPageLoading ? () => {} : this.loadMoreImages}\r\n\t\t\t\t\tsizes={[{ columns: 3, gutter: 0 },\r\n\t\t\t\t\t{ mq: '1024px', columns: 4, gutter: 0 }]}\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.pendingImages.map((id, index) =>\r\n\t\t\t\t\t\t\tthis._rowRenderer({index: index, key: index, style: {height: \"30vw\", width: \"30vw\"}})\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</MasonryInfiniteScroller>\r\n\t\t\t\t{this.state.isNextPageLoading && <LoaderComponent />}\r\n\t\t\t\t\r\n\t\t\t\t<SuccessAlertComponent onClose={this._dismissNotifications}\r\n\t\t\t\t\t\t visible={this.state.successfullyRespondedToImage}\r\n\t\t\t\t\t\t message=\"Your response has been recorded.\"\r\n\t\t\t\t/>\r\n\t\t\t\t<ErrorAlertComponent onClose={this._dismissNotifications}\r\n\t\t\t\t\t\t visible={this.state.failedToRespondToImage}\r\n\t\t\t\t\t\t message=\"An error occurred while recording your response.\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n    }\r\n}","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {SECONDARY_COLOUR, FONT_FAMILY} from \"../constants/ThemeConstants\";\r\n\r\nimport AdminStore from \"../admin/AdminStore\";\r\n\r\nconst styles = {\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t},\r\n\tmenuButton: {\r\n\t\tmarginLeft: -12,\r\n\t\tmarginRight: 20,\r\n\t},\r\n\tbutton: {\r\n\t\tfontSize: 14,\r\n\t\t\"&:hover\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\t\"&:focus\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\tcolor: \"white\"\r\n\t},\r\n\ttitleButton: {\r\n\t\tfontSize: 18,\r\n\t\t\"&:hover\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\t\"&:focus\": {\r\n\t\t\tcolor: SECONDARY_COLOUR\r\n\t\t},\r\n\t\tcolor: \"white\",\r\n\t\tfontFamily: FONT_FAMILY\r\n\t}\r\n};\r\n\r\n/**\r\n * This component renders the global navigation bar at the top of the page\r\n */\r\nclass NavbarComponent extends Reflux.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.store = AdminStore;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<Link to=\"/\"><Button color=\"inherit\" className={classes.titleButton}>STEPS </Button> </Link>\r\n\t\t\t\t\t\t<Link to=\"/about/\"><Button color=\"inherit\" className={classes.button}>  About </Button></Link>\r\n\t\t\t\t\t\t<Link to=\"/statistics/\"><Button color=\"inherit\" className={classes.button}> <Link to=\"/statistics/\"/> Statistics </Button></Link>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t!this.state.isLoggedIn && <Link to=\"/login\"><Button color=\"inherit\" className={classes.button}> Login </Button> </Link>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.isLoggedIn && <Link to=\"/dashboard\"><Button color=\"inherit\" className={classes.button}>  Dashboard</Button></Link>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(styles)(NavbarComponent);","import React from \"react\";\r\nimport { Component } from \"reflux\";\r\nimport md5 from \"md5\";\r\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nimport AdminActions from \"./AdminActions\";\r\nimport Store from \"./AdminStore\";\r\n\r\nimport SuccessAlertComponent from \"../misc-components/SuccessAlertComponent\";\r\nimport ErrorAlertComponent from \"../misc-components/ErrorAlertComponent\";\r\n\r\n/**\r\n * This component renders the page for admin Login\r\n */\r\nexport default class AdminLogin extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.store = Store;\r\n\t\tthis.state = {\r\n            enteredName: \"\",\r\n            enteredPassword: \"\"\r\n        };\r\n    }\r\n    \r\n\tcomponentWillUpdate() {\r\n\t\tif (this.state.isLoggedIn){\r\n            this.props.history.push('/dashboard');\r\n        }\r\n\t}\r\n\t\r\n    /**\r\n\t * Handles the user changing their username text value\r\n\t */\r\n\t_handleUserChange = (e) => {\r\n\t\tthis.setState({ \r\n            enteredName: e.target.value,\r\n\t\t});\r\n    }\r\n    \r\n    /**\r\n\t * Handles the user changing their password text value\r\n\t */\r\n    _handlePassChange = (e) => {\r\n\t\tthis.setState({ \r\n            enteredPassword: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets whether the submit button is enabled or not\r\n\t * @return {boolean} - whether the submit button is enabled or not\r\n\t */\r\n    _validateCredentials = () => {\r\n\t\treturn this.state.enteredName.length > 0 && this.state.enteredPassword.length > 0;\r\n    }\r\n\r\n    _handleSubmit = () => {\r\n        AdminActions.checkCredentials(this.state.enteredName, md5(this.state.enteredPassword));\r\n\t\tthis.setState({\r\n            enteredName: \"\",\r\n            enteredPassword: \"\"\r\n        });\r\n    }\r\n    /**\r\n\t * Handles the component being closed\r\n\t */\r\n\t_handleClose = () => {\r\n        AdminActions.dismissLoginSuccess();\r\n        AdminActions.dismissLoginError();\r\n\t};\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"loginContainer\" data-admin-login={true}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<h3 className=\"adminTitleLogin\">Admin Login</h3>\r\n\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t<FormGroup \r\n\t\t\t\t\t\t\t\tcontrolId=\"username\" \r\n\t\t\t\t\t\t\t\tbsSize=\"small\">\r\n\t\t\t\t\t\t\t\t<ControlLabel>Username</ControlLabel>\r\n\t\t\t\t\t\t\t\t<FormControl \r\n\t\t\t\t\t\t\t\t\tautoFocus type=\"username\" \r\n\t\t\t\t\t\t\t\t\tvalue={this.state.enteredName}\r\n\t\t\t\t\t\t\t\t\tonChange={this._handleUserChange}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Username\"/>\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<FormGroup \r\n\t\t\t\t\t\t\t\tcontrolId=\"password\" \r\n\t\t\t\t\t\t\t\tbsSize=\"small\">\r\n\t\t\t\t\t\t\t\t<ControlLabel>Password</ControlLabel>\r\n\t\t\t\t\t\t\t\t<FormControl \r\n\t\t\t\t\t\t\t\t\tvalue={this.state.enteredPassword} \r\n\t\t\t\t\t\t\t\t\tonChange={this._handlePassChange}\r\n\t\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"/>\r\n\t\t\t\t\t\t\t</FormGroup> \r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Button bsStyle=\"primary\" type=\"submit\" onClick = {this._handleSubmit} disabled={!this._validateCredentials()}>Login</Button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Card>\r\n                \r\n                <SuccessAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.successfullyLoggedIn}\r\n\t\t\t\t\t\t\t\t message=\"You have successfully been logged in.\"/>\r\n                <ErrorAlertComponent onClose={this._handleClose}\r\n\t\t\t\t\t\t\t\t visible={this.state.failedToLogIn}\r\n\t\t\t\t\t\t\t\t message=\"You have entered an incorrect username or password.\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Reflux from \"reflux\";\r\n\r\nconst Actions = Reflux.createActions([\r\n\t\"loadSummaryStatistics\"\r\n]);\r\n\r\nexport default Actions;","import Reflux from \"reflux\";\r\n\r\nimport Actions from \"./SummaryStatisticsActions\";\r\nimport RestUtil from \"../util/RestUtil\";\r\n\r\n/**\r\n * This store keeps track of the state of components that render information related to sidewalk summary statistics\r\n */\r\nexport default class SummaryStatisticsStore extends Reflux.Store {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n\t\tthis.listenables = Actions;\r\n\t\t\r\n\t\tif (process.env.NODE_ENV === \"development\"){\r\n\t\t\twindow.DEV_STATISTICS_STORE = this;\r\n\t\t}\r\n\t}\r\n\r\n\tonLoadSummaryStatistics() {\r\n\t\tthis.setState({\r\n\t\t\tisLoading: true\r\n\t\t});\r\n\t\tRestUtil.sendGetRequest(\"sidewalk/summary\").then((res) => {\r\n\t\t\tres.isLoading = false;\r\n\t\t\tres.contributionsByMonth.sort((a, b) => {\r\n\t\t\t\tconst aSplit = a.monthYear.split(\"/\"),\r\n\t\t\t\t\taMonth = parseInt(aSplit[0]),\r\n\t\t\t\t\taYear = parseInt(aSplit[1]);\r\n\t\t\t\tconst bSplit = b.monthYear.split(\"/\"),\r\n\t\t\t\t\tbMonth = parseInt(bSplit[0]),\r\n\t\t\t\t\tbYear = parseInt(bSplit[1]);\r\n\t\t\t\tif (aYear === bYear) {\r\n\t\t\t\t\treturn aMonth - bMonth;\r\n\t\t\t\t}\r\n\t\t\t\treturn aYear - bYear;\r\n\t\t\t});\r\n\t\t\tthis.setState(res);\r\n\t\t}).catch((err) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisLoading: false\r\n\t\t\t});\r\n\t\t\tconsole.error(err);\r\n\t\t});\r\n\t}\r\n\t\r\n}\r\n","import React from \"react\";\r\nimport Reflux from \"reflux\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {BootstrapTable, TableHeaderColumn} from \"react-bootstrap-table\";\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\nimport \"react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\r\n\r\nimport Store from \"./SummaryStatisticsStore\";\r\nimport Actions from \"./SummaryStatisticsActions\";\r\nimport DateUtilities from \"../util/DateUtilities\";\r\nimport LoaderComponent from \"../misc-components/LoaderComponent\";\r\n\r\n/**\r\n * Renders summary statistics across all sidewalks\r\n */\r\nexport default class SummaryStatisticsView extends Reflux.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.store = Store;\r\n\t\tthis.state = {\r\n\t\t\tselectedTab: 0\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tActions.loadSummaryStatistics();\r\n\t}\r\n\t\r\n\t_onChangeTab = (event, value) => {\r\n\t\tthis.setState({\r\n\t\t\tselectedTab: value\r\n\t\t});\r\n\t};\r\n\t\r\n\trenderCard(title, value) {\r\n\t\treturn (\r\n\t\t\t<Grid item xs>\r\n\t\t\t\t<Card className=\"card\">\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<h3 data-contributions-value={value}>\r\n\t\t\t\t\t\t\t{value}\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t{title}\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Card>\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderContributionsByDate() {\r\n\t\tconst data = this.state.contributionsByMonth.map((contribution) => {\r\n\t\t\treturn {\r\n\t\t\t\tmonth: parseInt(contribution.monthYear.split(\"/\")[0]),\r\n\t\t\t\tyear: parseInt(contribution.monthYear.split(\"/\")[1]),\r\n\t\t\t\tamount: contribution.contributions\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<BootstrapTable data={data} pagination={data.length > 30} keyField=\"a\">\r\n\t\t\t\t<TableHeaderColumn className=\"lightFontWeight\" dataField='month' dataSort dataFormat={DateUtilities.getMonthName}>Month</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn className=\"lightFontWeight\" dataField='year' dataSort>Year</TableHeaderColumn>\r\n\t\t\t\t<TableHeaderColumn className=\"lightFontWeight\" dataField='amount' dataSort>Contributions</TableHeaderColumn>\r\n\t\t\t</BootstrapTable>\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderContributionsChart() {\r\n\t\tconst data = {\r\n\t\t\tlabels: this.state.contributionsByMonth.map((contribution) => {\r\n\t\t\t\tconst split = contribution.monthYear.split(\"/\");\r\n\t\t\t\treturn `${DateUtilities.getMonthName(parseInt(split[0]))} ${split[1]}`;\r\n\t\t\t}),\r\n\t\t\tdatasets: [{\r\n\t\t\t\tlabel: \"Contributions By Date\",\r\n\t\t\t\tdata: this.state.contributionsByMonth.map((contribution) => {\r\n\t\t\t\t\treturn contribution.contributions;\r\n\t\t\t\t}),\r\n\t\t\t\tbackgroundColor: \"purple\"\r\n\t\t\t}]\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Line data={data} options={{\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tdisplay: false\r\n\t\t\t\t},\r\n\t\t\t\tscales: {\r\n\t\t\t\t yAxes: [{\r\n\t\t\t\t\tgridLines: {\r\n\t\t\t\t\t\tdisplay: false\r\n\t\t\t\t\t}  \r\n\t\t\t\t  }]\r\n\t\t\t\t },\r\n\t\t\t}} />\r\n\t\t);\r\n\t}\r\n\t\r\n\trenderSelectedTab() {\r\n\t\tif (!this.state.contributionsByMonth) {\r\n\t\t\treturn <LoaderComponent />;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div data-summary-contributions>\r\n\t\t\t\t<Grid container spacing={16}>\r\n\t\t\t\t\t{this.renderCard(\"Total Ratings\", this.state.totalRatings)}\r\n\t\t\t\t\t{this.renderCard(\"Total Comments\", this.state.totalComments)}\r\n\t\t\t\t\t{this.renderCard(\"Total Images\", this.state.totalImagesUploaded)}\r\n\t\t\t\t\t{this.renderCard(\"Contributions\", this.state.totalImagesUploaded + this.state.totalRatings + this.state.totalComments)}\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<div className=\"table\">\r\n\t\t\t\t\t{this.renderContributionsByDate()}\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.renderContributionsChart()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div data-summary-stats className=\"statsPanel\">\r\n\t\t\t\t{this.renderSelectedTab()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport './style/App.scss';\r\n\r\nimport MapDashboard from \"./map/MapDashboard\";\r\nimport AboutPageView from \"./misc-components/AboutPageView\";\r\nimport AdminPanelView from \"./admin/AdminPanelView\";\r\nimport NavbarComponent from \"./misc-components/NavbarComponent\";\r\nimport AdminLogin from \"./admin/AdminLogin\";\r\nimport SummaryStatisticsView from \"./summary/SummaryStatisticsView\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavbarComponent />\r\n        <Switch>\r\n          <Route path=\"/about/\" component={AboutPageView} />\r\n          <Route path=\"/statistics\" component={SummaryStatisticsView} />\r\n          <Route path=\"/login\" component={AdminLogin} />\r\n          <Route path=\"/map/:id\" component={MapDashboard} />\r\n          <Route path=\"/dashboard\" component={AdminPanelView} />\r\n          <Route path=\"/\" component={MapDashboard} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport purple from \"@material-ui/core/colors/purple\";\r\nimport {SECONDARY_COLOUR} from \"./constants/ThemeConstants\";\r\n\r\nconst theme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: purple,\r\n\t\tsecondary: {\r\n\t\t\tmain: SECONDARY_COLOUR,\r\n\t\t}\r\n\t},\r\n\ttypography: {\r\n\t\tuseNextVariants: true\r\n\t}\r\n});\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<MuiThemeProvider theme={theme}>\r\n\t\t\t<App />\r\n\t\t</MuiThemeProvider>\r\n\t</BrowserRouter>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}